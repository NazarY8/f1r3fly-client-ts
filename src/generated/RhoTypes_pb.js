// source: RhoTypes.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var scalapb_scalapb_pb = require('./scalapb/scalapb_pb.js');
goog.object.extend(proto, scalapb_scalapb_pb);
goog.exportSymbol('proto.rhoapi.BindPattern', null, global);
goog.exportSymbol('proto.rhoapi.Bundle', null, global);
goog.exportSymbol('proto.rhoapi.Connective', null, global);
goog.exportSymbol('proto.rhoapi.Connective.ConnectiveInstanceCase', null, global);
goog.exportSymbol('proto.rhoapi.ConnectiveBody', null, global);
goog.exportSymbol('proto.rhoapi.DeployId', null, global);
goog.exportSymbol('proto.rhoapi.DeployerId', null, global);
goog.exportSymbol('proto.rhoapi.EAnd', null, global);
goog.exportSymbol('proto.rhoapi.EDiv', null, global);
goog.exportSymbol('proto.rhoapi.EEq', null, global);
goog.exportSymbol('proto.rhoapi.EGt', null, global);
goog.exportSymbol('proto.rhoapi.EGte', null, global);
goog.exportSymbol('proto.rhoapi.EList', null, global);
goog.exportSymbol('proto.rhoapi.ELt', null, global);
goog.exportSymbol('proto.rhoapi.ELte', null, global);
goog.exportSymbol('proto.rhoapi.EMap', null, global);
goog.exportSymbol('proto.rhoapi.EMatches', null, global);
goog.exportSymbol('proto.rhoapi.EMethod', null, global);
goog.exportSymbol('proto.rhoapi.EMinus', null, global);
goog.exportSymbol('proto.rhoapi.EMinusMinus', null, global);
goog.exportSymbol('proto.rhoapi.EMod', null, global);
goog.exportSymbol('proto.rhoapi.EMult', null, global);
goog.exportSymbol('proto.rhoapi.ENeg', null, global);
goog.exportSymbol('proto.rhoapi.ENeq', null, global);
goog.exportSymbol('proto.rhoapi.ENot', null, global);
goog.exportSymbol('proto.rhoapi.EOr', null, global);
goog.exportSymbol('proto.rhoapi.EPercentPercent', null, global);
goog.exportSymbol('proto.rhoapi.EPlus', null, global);
goog.exportSymbol('proto.rhoapi.EPlusPlus', null, global);
goog.exportSymbol('proto.rhoapi.ESet', null, global);
goog.exportSymbol('proto.rhoapi.ETuple', null, global);
goog.exportSymbol('proto.rhoapi.EVar', null, global);
goog.exportSymbol('proto.rhoapi.Expr', null, global);
goog.exportSymbol('proto.rhoapi.Expr.ExprInstanceCase', null, global);
goog.exportSymbol('proto.rhoapi.GDeployId', null, global);
goog.exportSymbol('proto.rhoapi.GDeployerId', null, global);
goog.exportSymbol('proto.rhoapi.GPrivate', null, global);
goog.exportSymbol('proto.rhoapi.GSysAuthToken', null, global);
goog.exportSymbol('proto.rhoapi.GUnforgeable', null, global);
goog.exportSymbol('proto.rhoapi.GUnforgeable.UnfInstanceCase', null, global);
goog.exportSymbol('proto.rhoapi.KeyValuePair', null, global);
goog.exportSymbol('proto.rhoapi.ListBindPatterns', null, global);
goog.exportSymbol('proto.rhoapi.ListParWithRandom', null, global);
goog.exportSymbol('proto.rhoapi.Match', null, global);
goog.exportSymbol('proto.rhoapi.MatchCase', null, global);
goog.exportSymbol('proto.rhoapi.New', null, global);
goog.exportSymbol('proto.rhoapi.PCost', null, global);
goog.exportSymbol('proto.rhoapi.Par', null, global);
goog.exportSymbol('proto.rhoapi.ParWithRandom', null, global);
goog.exportSymbol('proto.rhoapi.Receive', null, global);
goog.exportSymbol('proto.rhoapi.ReceiveBind', null, global);
goog.exportSymbol('proto.rhoapi.Send', null, global);
goog.exportSymbol('proto.rhoapi.TaggedContinuation', null, global);
goog.exportSymbol('proto.rhoapi.TaggedContinuation.TaggedContCase', null, global);
goog.exportSymbol('proto.rhoapi.Var', null, global);
goog.exportSymbol('proto.rhoapi.Var.VarInstanceCase', null, global);
goog.exportSymbol('proto.rhoapi.Var.WildcardMsg', null, global);
goog.exportSymbol('proto.rhoapi.VarRef', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rhoapi.Par = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rhoapi.Par.repeatedFields_, null);
};
goog.inherits(proto.rhoapi.Par, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rhoapi.Par.displayName = 'proto.rhoapi.Par';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rhoapi.TaggedContinuation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.rhoapi.TaggedContinuation.oneofGroups_);
};
goog.inherits(proto.rhoapi.TaggedContinuation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rhoapi.TaggedContinuation.displayName = 'proto.rhoapi.TaggedContinuation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rhoapi.ParWithRandom = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rhoapi.ParWithRandom, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rhoapi.ParWithRandom.displayName = 'proto.rhoapi.ParWithRandom';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rhoapi.PCost = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rhoapi.PCost, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rhoapi.PCost.displayName = 'proto.rhoapi.PCost';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rhoapi.ListParWithRandom = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rhoapi.ListParWithRandom.repeatedFields_, null);
};
goog.inherits(proto.rhoapi.ListParWithRandom, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rhoapi.ListParWithRandom.displayName = 'proto.rhoapi.ListParWithRandom';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rhoapi.Var = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.rhoapi.Var.oneofGroups_);
};
goog.inherits(proto.rhoapi.Var, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rhoapi.Var.displayName = 'proto.rhoapi.Var';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rhoapi.Var.WildcardMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rhoapi.Var.WildcardMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rhoapi.Var.WildcardMsg.displayName = 'proto.rhoapi.Var.WildcardMsg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rhoapi.Bundle = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rhoapi.Bundle, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rhoapi.Bundle.displayName = 'proto.rhoapi.Bundle';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rhoapi.Send = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rhoapi.Send.repeatedFields_, null);
};
goog.inherits(proto.rhoapi.Send, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rhoapi.Send.displayName = 'proto.rhoapi.Send';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rhoapi.ReceiveBind = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rhoapi.ReceiveBind.repeatedFields_, null);
};
goog.inherits(proto.rhoapi.ReceiveBind, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rhoapi.ReceiveBind.displayName = 'proto.rhoapi.ReceiveBind';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rhoapi.BindPattern = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rhoapi.BindPattern.repeatedFields_, null);
};
goog.inherits(proto.rhoapi.BindPattern, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rhoapi.BindPattern.displayName = 'proto.rhoapi.BindPattern';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rhoapi.ListBindPatterns = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rhoapi.ListBindPatterns.repeatedFields_, null);
};
goog.inherits(proto.rhoapi.ListBindPatterns, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rhoapi.ListBindPatterns.displayName = 'proto.rhoapi.ListBindPatterns';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rhoapi.Receive = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rhoapi.Receive.repeatedFields_, null);
};
goog.inherits(proto.rhoapi.Receive, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rhoapi.Receive.displayName = 'proto.rhoapi.Receive';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rhoapi.New = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rhoapi.New.repeatedFields_, null);
};
goog.inherits(proto.rhoapi.New, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rhoapi.New.displayName = 'proto.rhoapi.New';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rhoapi.MatchCase = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rhoapi.MatchCase, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rhoapi.MatchCase.displayName = 'proto.rhoapi.MatchCase';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rhoapi.Match = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rhoapi.Match.repeatedFields_, null);
};
goog.inherits(proto.rhoapi.Match, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rhoapi.Match.displayName = 'proto.rhoapi.Match';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rhoapi.Expr = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.rhoapi.Expr.oneofGroups_);
};
goog.inherits(proto.rhoapi.Expr, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rhoapi.Expr.displayName = 'proto.rhoapi.Expr';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rhoapi.EList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rhoapi.EList.repeatedFields_, null);
};
goog.inherits(proto.rhoapi.EList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rhoapi.EList.displayName = 'proto.rhoapi.EList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rhoapi.ETuple = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rhoapi.ETuple.repeatedFields_, null);
};
goog.inherits(proto.rhoapi.ETuple, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rhoapi.ETuple.displayName = 'proto.rhoapi.ETuple';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rhoapi.ESet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rhoapi.ESet.repeatedFields_, null);
};
goog.inherits(proto.rhoapi.ESet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rhoapi.ESet.displayName = 'proto.rhoapi.ESet';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rhoapi.EMap = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rhoapi.EMap.repeatedFields_, null);
};
goog.inherits(proto.rhoapi.EMap, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rhoapi.EMap.displayName = 'proto.rhoapi.EMap';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rhoapi.EMethod = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rhoapi.EMethod.repeatedFields_, null);
};
goog.inherits(proto.rhoapi.EMethod, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rhoapi.EMethod.displayName = 'proto.rhoapi.EMethod';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rhoapi.KeyValuePair = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rhoapi.KeyValuePair, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rhoapi.KeyValuePair.displayName = 'proto.rhoapi.KeyValuePair';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rhoapi.EVar = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rhoapi.EVar, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rhoapi.EVar.displayName = 'proto.rhoapi.EVar';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rhoapi.ENot = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rhoapi.ENot, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rhoapi.ENot.displayName = 'proto.rhoapi.ENot';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rhoapi.ENeg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rhoapi.ENeg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rhoapi.ENeg.displayName = 'proto.rhoapi.ENeg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rhoapi.EMult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rhoapi.EMult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rhoapi.EMult.displayName = 'proto.rhoapi.EMult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rhoapi.EDiv = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rhoapi.EDiv, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rhoapi.EDiv.displayName = 'proto.rhoapi.EDiv';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rhoapi.EMod = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rhoapi.EMod, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rhoapi.EMod.displayName = 'proto.rhoapi.EMod';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rhoapi.EPlus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rhoapi.EPlus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rhoapi.EPlus.displayName = 'proto.rhoapi.EPlus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rhoapi.EMinus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rhoapi.EMinus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rhoapi.EMinus.displayName = 'proto.rhoapi.EMinus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rhoapi.ELt = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rhoapi.ELt, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rhoapi.ELt.displayName = 'proto.rhoapi.ELt';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rhoapi.ELte = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rhoapi.ELte, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rhoapi.ELte.displayName = 'proto.rhoapi.ELte';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rhoapi.EGt = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rhoapi.EGt, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rhoapi.EGt.displayName = 'proto.rhoapi.EGt';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rhoapi.EGte = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rhoapi.EGte, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rhoapi.EGte.displayName = 'proto.rhoapi.EGte';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rhoapi.EEq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rhoapi.EEq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rhoapi.EEq.displayName = 'proto.rhoapi.EEq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rhoapi.ENeq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rhoapi.ENeq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rhoapi.ENeq.displayName = 'proto.rhoapi.ENeq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rhoapi.EAnd = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rhoapi.EAnd, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rhoapi.EAnd.displayName = 'proto.rhoapi.EAnd';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rhoapi.EOr = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rhoapi.EOr, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rhoapi.EOr.displayName = 'proto.rhoapi.EOr';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rhoapi.EMatches = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rhoapi.EMatches, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rhoapi.EMatches.displayName = 'proto.rhoapi.EMatches';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rhoapi.EPercentPercent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rhoapi.EPercentPercent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rhoapi.EPercentPercent.displayName = 'proto.rhoapi.EPercentPercent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rhoapi.EPlusPlus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rhoapi.EPlusPlus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rhoapi.EPlusPlus.displayName = 'proto.rhoapi.EPlusPlus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rhoapi.EMinusMinus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rhoapi.EMinusMinus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rhoapi.EMinusMinus.displayName = 'proto.rhoapi.EMinusMinus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rhoapi.Connective = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.rhoapi.Connective.oneofGroups_);
};
goog.inherits(proto.rhoapi.Connective, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rhoapi.Connective.displayName = 'proto.rhoapi.Connective';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rhoapi.VarRef = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rhoapi.VarRef, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rhoapi.VarRef.displayName = 'proto.rhoapi.VarRef';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rhoapi.ConnectiveBody = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rhoapi.ConnectiveBody.repeatedFields_, null);
};
goog.inherits(proto.rhoapi.ConnectiveBody, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rhoapi.ConnectiveBody.displayName = 'proto.rhoapi.ConnectiveBody';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rhoapi.DeployId = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rhoapi.DeployId, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rhoapi.DeployId.displayName = 'proto.rhoapi.DeployId';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rhoapi.DeployerId = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rhoapi.DeployerId, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rhoapi.DeployerId.displayName = 'proto.rhoapi.DeployerId';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rhoapi.GUnforgeable = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.rhoapi.GUnforgeable.oneofGroups_);
};
goog.inherits(proto.rhoapi.GUnforgeable, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rhoapi.GUnforgeable.displayName = 'proto.rhoapi.GUnforgeable';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rhoapi.GPrivate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rhoapi.GPrivate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rhoapi.GPrivate.displayName = 'proto.rhoapi.GPrivate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rhoapi.GDeployId = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rhoapi.GDeployId, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rhoapi.GDeployId.displayName = 'proto.rhoapi.GDeployId';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rhoapi.GDeployerId = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rhoapi.GDeployerId, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rhoapi.GDeployerId.displayName = 'proto.rhoapi.GDeployerId';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rhoapi.GSysAuthToken = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rhoapi.GSysAuthToken, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rhoapi.GSysAuthToken.displayName = 'proto.rhoapi.GSysAuthToken';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rhoapi.Par.repeatedFields_ = [1,2,4,5,6,7,11,8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rhoapi.Par.prototype.toObject = function(opt_includeInstance) {
  return proto.rhoapi.Par.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rhoapi.Par} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rhoapi.Par.toObject = function(includeInstance, msg) {
  var f, obj = {
    sendsList: jspb.Message.toObjectList(msg.getSendsList(),
    proto.rhoapi.Send.toObject, includeInstance),
    receivesList: jspb.Message.toObjectList(msg.getReceivesList(),
    proto.rhoapi.Receive.toObject, includeInstance),
    newsList: jspb.Message.toObjectList(msg.getNewsList(),
    proto.rhoapi.New.toObject, includeInstance),
    exprsList: jspb.Message.toObjectList(msg.getExprsList(),
    proto.rhoapi.Expr.toObject, includeInstance),
    matchesList: jspb.Message.toObjectList(msg.getMatchesList(),
    proto.rhoapi.Match.toObject, includeInstance),
    unforgeablesList: jspb.Message.toObjectList(msg.getUnforgeablesList(),
    proto.rhoapi.GUnforgeable.toObject, includeInstance),
    bundlesList: jspb.Message.toObjectList(msg.getBundlesList(),
    proto.rhoapi.Bundle.toObject, includeInstance),
    connectivesList: jspb.Message.toObjectList(msg.getConnectivesList(),
    proto.rhoapi.Connective.toObject, includeInstance),
    locallyfree: msg.getLocallyfree_asB64(),
    connectiveUsed: jspb.Message.getBooleanFieldWithDefault(msg, 10, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rhoapi.Par}
 */
proto.rhoapi.Par.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rhoapi.Par;
  return proto.rhoapi.Par.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rhoapi.Par} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rhoapi.Par}
 */
proto.rhoapi.Par.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rhoapi.Send;
      reader.readMessage(value,proto.rhoapi.Send.deserializeBinaryFromReader);
      msg.addSends(value);
      break;
    case 2:
      var value = new proto.rhoapi.Receive;
      reader.readMessage(value,proto.rhoapi.Receive.deserializeBinaryFromReader);
      msg.addReceives(value);
      break;
    case 4:
      var value = new proto.rhoapi.New;
      reader.readMessage(value,proto.rhoapi.New.deserializeBinaryFromReader);
      msg.addNews(value);
      break;
    case 5:
      var value = new proto.rhoapi.Expr;
      reader.readMessage(value,proto.rhoapi.Expr.deserializeBinaryFromReader);
      msg.addExprs(value);
      break;
    case 6:
      var value = new proto.rhoapi.Match;
      reader.readMessage(value,proto.rhoapi.Match.deserializeBinaryFromReader);
      msg.addMatches(value);
      break;
    case 7:
      var value = new proto.rhoapi.GUnforgeable;
      reader.readMessage(value,proto.rhoapi.GUnforgeable.deserializeBinaryFromReader);
      msg.addUnforgeables(value);
      break;
    case 11:
      var value = new proto.rhoapi.Bundle;
      reader.readMessage(value,proto.rhoapi.Bundle.deserializeBinaryFromReader);
      msg.addBundles(value);
      break;
    case 8:
      var value = new proto.rhoapi.Connective;
      reader.readMessage(value,proto.rhoapi.Connective.deserializeBinaryFromReader);
      msg.addConnectives(value);
      break;
    case 9:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setLocallyfree(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setConnectiveUsed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rhoapi.Par.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rhoapi.Par.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rhoapi.Par} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rhoapi.Par.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSendsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.rhoapi.Send.serializeBinaryToWriter
    );
  }
  f = message.getReceivesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.rhoapi.Receive.serializeBinaryToWriter
    );
  }
  f = message.getNewsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.rhoapi.New.serializeBinaryToWriter
    );
  }
  f = message.getExprsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.rhoapi.Expr.serializeBinaryToWriter
    );
  }
  f = message.getMatchesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.rhoapi.Match.serializeBinaryToWriter
    );
  }
  f = message.getUnforgeablesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.rhoapi.GUnforgeable.serializeBinaryToWriter
    );
  }
  f = message.getBundlesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      11,
      f,
      proto.rhoapi.Bundle.serializeBinaryToWriter
    );
  }
  f = message.getConnectivesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.rhoapi.Connective.serializeBinaryToWriter
    );
  }
  f = message.getLocallyfree_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      9,
      f
    );
  }
  f = message.getConnectiveUsed();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
};


/**
 * repeated Send sends = 1;
 * @return {!Array<!proto.rhoapi.Send>}
 */
proto.rhoapi.Par.prototype.getSendsList = function() {
  return /** @type{!Array<!proto.rhoapi.Send>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rhoapi.Send, 1));
};


/**
 * @param {!Array<!proto.rhoapi.Send>} value
 * @return {!proto.rhoapi.Par} returns this
*/
proto.rhoapi.Par.prototype.setSendsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.rhoapi.Send=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rhoapi.Send}
 */
proto.rhoapi.Par.prototype.addSends = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.rhoapi.Send, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rhoapi.Par} returns this
 */
proto.rhoapi.Par.prototype.clearSendsList = function() {
  return this.setSendsList([]);
};


/**
 * repeated Receive receives = 2;
 * @return {!Array<!proto.rhoapi.Receive>}
 */
proto.rhoapi.Par.prototype.getReceivesList = function() {
  return /** @type{!Array<!proto.rhoapi.Receive>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rhoapi.Receive, 2));
};


/**
 * @param {!Array<!proto.rhoapi.Receive>} value
 * @return {!proto.rhoapi.Par} returns this
*/
proto.rhoapi.Par.prototype.setReceivesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.rhoapi.Receive=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rhoapi.Receive}
 */
proto.rhoapi.Par.prototype.addReceives = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.rhoapi.Receive, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rhoapi.Par} returns this
 */
proto.rhoapi.Par.prototype.clearReceivesList = function() {
  return this.setReceivesList([]);
};


/**
 * repeated New news = 4;
 * @return {!Array<!proto.rhoapi.New>}
 */
proto.rhoapi.Par.prototype.getNewsList = function() {
  return /** @type{!Array<!proto.rhoapi.New>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rhoapi.New, 4));
};


/**
 * @param {!Array<!proto.rhoapi.New>} value
 * @return {!proto.rhoapi.Par} returns this
*/
proto.rhoapi.Par.prototype.setNewsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.rhoapi.New=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rhoapi.New}
 */
proto.rhoapi.Par.prototype.addNews = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.rhoapi.New, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rhoapi.Par} returns this
 */
proto.rhoapi.Par.prototype.clearNewsList = function() {
  return this.setNewsList([]);
};


/**
 * repeated Expr exprs = 5;
 * @return {!Array<!proto.rhoapi.Expr>}
 */
proto.rhoapi.Par.prototype.getExprsList = function() {
  return /** @type{!Array<!proto.rhoapi.Expr>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rhoapi.Expr, 5));
};


/**
 * @param {!Array<!proto.rhoapi.Expr>} value
 * @return {!proto.rhoapi.Par} returns this
*/
proto.rhoapi.Par.prototype.setExprsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.rhoapi.Expr=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rhoapi.Expr}
 */
proto.rhoapi.Par.prototype.addExprs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.rhoapi.Expr, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rhoapi.Par} returns this
 */
proto.rhoapi.Par.prototype.clearExprsList = function() {
  return this.setExprsList([]);
};


/**
 * repeated Match matches = 6;
 * @return {!Array<!proto.rhoapi.Match>}
 */
proto.rhoapi.Par.prototype.getMatchesList = function() {
  return /** @type{!Array<!proto.rhoapi.Match>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rhoapi.Match, 6));
};


/**
 * @param {!Array<!proto.rhoapi.Match>} value
 * @return {!proto.rhoapi.Par} returns this
*/
proto.rhoapi.Par.prototype.setMatchesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.rhoapi.Match=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rhoapi.Match}
 */
proto.rhoapi.Par.prototype.addMatches = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.rhoapi.Match, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rhoapi.Par} returns this
 */
proto.rhoapi.Par.prototype.clearMatchesList = function() {
  return this.setMatchesList([]);
};


/**
 * repeated GUnforgeable unforgeables = 7;
 * @return {!Array<!proto.rhoapi.GUnforgeable>}
 */
proto.rhoapi.Par.prototype.getUnforgeablesList = function() {
  return /** @type{!Array<!proto.rhoapi.GUnforgeable>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rhoapi.GUnforgeable, 7));
};


/**
 * @param {!Array<!proto.rhoapi.GUnforgeable>} value
 * @return {!proto.rhoapi.Par} returns this
*/
proto.rhoapi.Par.prototype.setUnforgeablesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.rhoapi.GUnforgeable=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rhoapi.GUnforgeable}
 */
proto.rhoapi.Par.prototype.addUnforgeables = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.rhoapi.GUnforgeable, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rhoapi.Par} returns this
 */
proto.rhoapi.Par.prototype.clearUnforgeablesList = function() {
  return this.setUnforgeablesList([]);
};


/**
 * repeated Bundle bundles = 11;
 * @return {!Array<!proto.rhoapi.Bundle>}
 */
proto.rhoapi.Par.prototype.getBundlesList = function() {
  return /** @type{!Array<!proto.rhoapi.Bundle>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rhoapi.Bundle, 11));
};


/**
 * @param {!Array<!proto.rhoapi.Bundle>} value
 * @return {!proto.rhoapi.Par} returns this
*/
proto.rhoapi.Par.prototype.setBundlesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 11, value);
};


/**
 * @param {!proto.rhoapi.Bundle=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rhoapi.Bundle}
 */
proto.rhoapi.Par.prototype.addBundles = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 11, opt_value, proto.rhoapi.Bundle, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rhoapi.Par} returns this
 */
proto.rhoapi.Par.prototype.clearBundlesList = function() {
  return this.setBundlesList([]);
};


/**
 * repeated Connective connectives = 8;
 * @return {!Array<!proto.rhoapi.Connective>}
 */
proto.rhoapi.Par.prototype.getConnectivesList = function() {
  return /** @type{!Array<!proto.rhoapi.Connective>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rhoapi.Connective, 8));
};


/**
 * @param {!Array<!proto.rhoapi.Connective>} value
 * @return {!proto.rhoapi.Par} returns this
*/
proto.rhoapi.Par.prototype.setConnectivesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.rhoapi.Connective=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rhoapi.Connective}
 */
proto.rhoapi.Par.prototype.addConnectives = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.rhoapi.Connective, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rhoapi.Par} returns this
 */
proto.rhoapi.Par.prototype.clearConnectivesList = function() {
  return this.setConnectivesList([]);
};


/**
 * optional bytes locallyFree = 9;
 * @return {!(string|Uint8Array)}
 */
proto.rhoapi.Par.prototype.getLocallyfree = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * optional bytes locallyFree = 9;
 * This is a type-conversion wrapper around `getLocallyfree()`
 * @return {string}
 */
proto.rhoapi.Par.prototype.getLocallyfree_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getLocallyfree()));
};


/**
 * optional bytes locallyFree = 9;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getLocallyfree()`
 * @return {!Uint8Array}
 */
proto.rhoapi.Par.prototype.getLocallyfree_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getLocallyfree()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.rhoapi.Par} returns this
 */
proto.rhoapi.Par.prototype.setLocallyfree = function(value) {
  return jspb.Message.setProto3BytesField(this, 9, value);
};


/**
 * optional bool connective_used = 10;
 * @return {boolean}
 */
proto.rhoapi.Par.prototype.getConnectiveUsed = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 10, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rhoapi.Par} returns this
 */
proto.rhoapi.Par.prototype.setConnectiveUsed = function(value) {
  return jspb.Message.setProto3BooleanField(this, 10, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.rhoapi.TaggedContinuation.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.rhoapi.TaggedContinuation.TaggedContCase = {
  TAGGED_CONT_NOT_SET: 0,
  PAR_BODY: 1,
  SCALA_BODY_REF: 2
};

/**
 * @return {proto.rhoapi.TaggedContinuation.TaggedContCase}
 */
proto.rhoapi.TaggedContinuation.prototype.getTaggedContCase = function() {
  return /** @type {proto.rhoapi.TaggedContinuation.TaggedContCase} */(jspb.Message.computeOneofCase(this, proto.rhoapi.TaggedContinuation.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rhoapi.TaggedContinuation.prototype.toObject = function(opt_includeInstance) {
  return proto.rhoapi.TaggedContinuation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rhoapi.TaggedContinuation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rhoapi.TaggedContinuation.toObject = function(includeInstance, msg) {
  var f, obj = {
    parBody: (f = msg.getParBody()) && proto.rhoapi.ParWithRandom.toObject(includeInstance, f),
    scalaBodyRef: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rhoapi.TaggedContinuation}
 */
proto.rhoapi.TaggedContinuation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rhoapi.TaggedContinuation;
  return proto.rhoapi.TaggedContinuation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rhoapi.TaggedContinuation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rhoapi.TaggedContinuation}
 */
proto.rhoapi.TaggedContinuation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rhoapi.ParWithRandom;
      reader.readMessage(value,proto.rhoapi.ParWithRandom.deserializeBinaryFromReader);
      msg.setParBody(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setScalaBodyRef(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rhoapi.TaggedContinuation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rhoapi.TaggedContinuation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rhoapi.TaggedContinuation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rhoapi.TaggedContinuation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParBody();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rhoapi.ParWithRandom.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional ParWithRandom par_body = 1;
 * @return {?proto.rhoapi.ParWithRandom}
 */
proto.rhoapi.TaggedContinuation.prototype.getParBody = function() {
  return /** @type{?proto.rhoapi.ParWithRandom} */ (
    jspb.Message.getWrapperField(this, proto.rhoapi.ParWithRandom, 1));
};


/**
 * @param {?proto.rhoapi.ParWithRandom|undefined} value
 * @return {!proto.rhoapi.TaggedContinuation} returns this
*/
proto.rhoapi.TaggedContinuation.prototype.setParBody = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.rhoapi.TaggedContinuation.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rhoapi.TaggedContinuation} returns this
 */
proto.rhoapi.TaggedContinuation.prototype.clearParBody = function() {
  return this.setParBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rhoapi.TaggedContinuation.prototype.hasParBody = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 scala_body_ref = 2;
 * @return {number}
 */
proto.rhoapi.TaggedContinuation.prototype.getScalaBodyRef = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.rhoapi.TaggedContinuation} returns this
 */
proto.rhoapi.TaggedContinuation.prototype.setScalaBodyRef = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.rhoapi.TaggedContinuation.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.rhoapi.TaggedContinuation} returns this
 */
proto.rhoapi.TaggedContinuation.prototype.clearScalaBodyRef = function() {
  return jspb.Message.setOneofField(this, 2, proto.rhoapi.TaggedContinuation.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rhoapi.TaggedContinuation.prototype.hasScalaBodyRef = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rhoapi.ParWithRandom.prototype.toObject = function(opt_includeInstance) {
  return proto.rhoapi.ParWithRandom.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rhoapi.ParWithRandom} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rhoapi.ParWithRandom.toObject = function(includeInstance, msg) {
  var f, obj = {
    body: (f = msg.getBody()) && proto.rhoapi.Par.toObject(includeInstance, f),
    randomstate: msg.getRandomstate_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rhoapi.ParWithRandom}
 */
proto.rhoapi.ParWithRandom.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rhoapi.ParWithRandom;
  return proto.rhoapi.ParWithRandom.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rhoapi.ParWithRandom} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rhoapi.ParWithRandom}
 */
proto.rhoapi.ParWithRandom.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rhoapi.Par;
      reader.readMessage(value,proto.rhoapi.Par.deserializeBinaryFromReader);
      msg.setBody(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRandomstate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rhoapi.ParWithRandom.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rhoapi.ParWithRandom.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rhoapi.ParWithRandom} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rhoapi.ParWithRandom.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBody();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rhoapi.Par.serializeBinaryToWriter
    );
  }
  f = message.getRandomstate_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional Par body = 1;
 * @return {?proto.rhoapi.Par}
 */
proto.rhoapi.ParWithRandom.prototype.getBody = function() {
  return /** @type{?proto.rhoapi.Par} */ (
    jspb.Message.getWrapperField(this, proto.rhoapi.Par, 1));
};


/**
 * @param {?proto.rhoapi.Par|undefined} value
 * @return {!proto.rhoapi.ParWithRandom} returns this
*/
proto.rhoapi.ParWithRandom.prototype.setBody = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rhoapi.ParWithRandom} returns this
 */
proto.rhoapi.ParWithRandom.prototype.clearBody = function() {
  return this.setBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rhoapi.ParWithRandom.prototype.hasBody = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes randomState = 2;
 * @return {!(string|Uint8Array)}
 */
proto.rhoapi.ParWithRandom.prototype.getRandomstate = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes randomState = 2;
 * This is a type-conversion wrapper around `getRandomstate()`
 * @return {string}
 */
proto.rhoapi.ParWithRandom.prototype.getRandomstate_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRandomstate()));
};


/**
 * optional bytes randomState = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRandomstate()`
 * @return {!Uint8Array}
 */
proto.rhoapi.ParWithRandom.prototype.getRandomstate_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRandomstate()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.rhoapi.ParWithRandom} returns this
 */
proto.rhoapi.ParWithRandom.prototype.setRandomstate = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rhoapi.PCost.prototype.toObject = function(opt_includeInstance) {
  return proto.rhoapi.PCost.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rhoapi.PCost} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rhoapi.PCost.toObject = function(includeInstance, msg) {
  var f, obj = {
    cost: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rhoapi.PCost}
 */
proto.rhoapi.PCost.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rhoapi.PCost;
  return proto.rhoapi.PCost.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rhoapi.PCost} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rhoapi.PCost}
 */
proto.rhoapi.PCost.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCost(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rhoapi.PCost.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rhoapi.PCost.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rhoapi.PCost} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rhoapi.PCost.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCost();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 cost = 1;
 * @return {number}
 */
proto.rhoapi.PCost.prototype.getCost = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.rhoapi.PCost} returns this
 */
proto.rhoapi.PCost.prototype.setCost = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rhoapi.ListParWithRandom.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rhoapi.ListParWithRandom.prototype.toObject = function(opt_includeInstance) {
  return proto.rhoapi.ListParWithRandom.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rhoapi.ListParWithRandom} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rhoapi.ListParWithRandom.toObject = function(includeInstance, msg) {
  var f, obj = {
    parsList: jspb.Message.toObjectList(msg.getParsList(),
    proto.rhoapi.Par.toObject, includeInstance),
    randomstate: msg.getRandomstate_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rhoapi.ListParWithRandom}
 */
proto.rhoapi.ListParWithRandom.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rhoapi.ListParWithRandom;
  return proto.rhoapi.ListParWithRandom.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rhoapi.ListParWithRandom} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rhoapi.ListParWithRandom}
 */
proto.rhoapi.ListParWithRandom.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rhoapi.Par;
      reader.readMessage(value,proto.rhoapi.Par.deserializeBinaryFromReader);
      msg.addPars(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRandomstate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rhoapi.ListParWithRandom.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rhoapi.ListParWithRandom.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rhoapi.ListParWithRandom} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rhoapi.ListParWithRandom.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.rhoapi.Par.serializeBinaryToWriter
    );
  }
  f = message.getRandomstate_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * repeated Par pars = 1;
 * @return {!Array<!proto.rhoapi.Par>}
 */
proto.rhoapi.ListParWithRandom.prototype.getParsList = function() {
  return /** @type{!Array<!proto.rhoapi.Par>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rhoapi.Par, 1));
};


/**
 * @param {!Array<!proto.rhoapi.Par>} value
 * @return {!proto.rhoapi.ListParWithRandom} returns this
*/
proto.rhoapi.ListParWithRandom.prototype.setParsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.rhoapi.Par=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rhoapi.Par}
 */
proto.rhoapi.ListParWithRandom.prototype.addPars = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.rhoapi.Par, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rhoapi.ListParWithRandom} returns this
 */
proto.rhoapi.ListParWithRandom.prototype.clearParsList = function() {
  return this.setParsList([]);
};


/**
 * optional bytes randomState = 2;
 * @return {!(string|Uint8Array)}
 */
proto.rhoapi.ListParWithRandom.prototype.getRandomstate = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes randomState = 2;
 * This is a type-conversion wrapper around `getRandomstate()`
 * @return {string}
 */
proto.rhoapi.ListParWithRandom.prototype.getRandomstate_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRandomstate()));
};


/**
 * optional bytes randomState = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRandomstate()`
 * @return {!Uint8Array}
 */
proto.rhoapi.ListParWithRandom.prototype.getRandomstate_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRandomstate()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.rhoapi.ListParWithRandom} returns this
 */
proto.rhoapi.ListParWithRandom.prototype.setRandomstate = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.rhoapi.Var.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.rhoapi.Var.VarInstanceCase = {
  VAR_INSTANCE_NOT_SET: 0,
  BOUND_VAR: 1,
  FREE_VAR: 2,
  WILDCARD: 3
};

/**
 * @return {proto.rhoapi.Var.VarInstanceCase}
 */
proto.rhoapi.Var.prototype.getVarInstanceCase = function() {
  return /** @type {proto.rhoapi.Var.VarInstanceCase} */(jspb.Message.computeOneofCase(this, proto.rhoapi.Var.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rhoapi.Var.prototype.toObject = function(opt_includeInstance) {
  return proto.rhoapi.Var.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rhoapi.Var} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rhoapi.Var.toObject = function(includeInstance, msg) {
  var f, obj = {
    boundVar: jspb.Message.getFieldWithDefault(msg, 1, 0),
    freeVar: jspb.Message.getFieldWithDefault(msg, 2, 0),
    wildcard: (f = msg.getWildcard()) && proto.rhoapi.Var.WildcardMsg.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rhoapi.Var}
 */
proto.rhoapi.Var.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rhoapi.Var;
  return proto.rhoapi.Var.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rhoapi.Var} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rhoapi.Var}
 */
proto.rhoapi.Var.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setBoundVar(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setFreeVar(value);
      break;
    case 3:
      var value = new proto.rhoapi.Var.WildcardMsg;
      reader.readMessage(value,proto.rhoapi.Var.WildcardMsg.deserializeBinaryFromReader);
      msg.setWildcard(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rhoapi.Var.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rhoapi.Var.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rhoapi.Var} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rhoapi.Var.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeSint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeSint32(
      2,
      f
    );
  }
  f = message.getWildcard();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.rhoapi.Var.WildcardMsg.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rhoapi.Var.WildcardMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.rhoapi.Var.WildcardMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rhoapi.Var.WildcardMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rhoapi.Var.WildcardMsg.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rhoapi.Var.WildcardMsg}
 */
proto.rhoapi.Var.WildcardMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rhoapi.Var.WildcardMsg;
  return proto.rhoapi.Var.WildcardMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rhoapi.Var.WildcardMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rhoapi.Var.WildcardMsg}
 */
proto.rhoapi.Var.WildcardMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rhoapi.Var.WildcardMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rhoapi.Var.WildcardMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rhoapi.Var.WildcardMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rhoapi.Var.WildcardMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * optional sint32 bound_var = 1;
 * @return {number}
 */
proto.rhoapi.Var.prototype.getBoundVar = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.rhoapi.Var} returns this
 */
proto.rhoapi.Var.prototype.setBoundVar = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.rhoapi.Var.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.rhoapi.Var} returns this
 */
proto.rhoapi.Var.prototype.clearBoundVar = function() {
  return jspb.Message.setOneofField(this, 1, proto.rhoapi.Var.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rhoapi.Var.prototype.hasBoundVar = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional sint32 free_var = 2;
 * @return {number}
 */
proto.rhoapi.Var.prototype.getFreeVar = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.rhoapi.Var} returns this
 */
proto.rhoapi.Var.prototype.setFreeVar = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.rhoapi.Var.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.rhoapi.Var} returns this
 */
proto.rhoapi.Var.prototype.clearFreeVar = function() {
  return jspb.Message.setOneofField(this, 2, proto.rhoapi.Var.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rhoapi.Var.prototype.hasFreeVar = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional WildcardMsg wildcard = 3;
 * @return {?proto.rhoapi.Var.WildcardMsg}
 */
proto.rhoapi.Var.prototype.getWildcard = function() {
  return /** @type{?proto.rhoapi.Var.WildcardMsg} */ (
    jspb.Message.getWrapperField(this, proto.rhoapi.Var.WildcardMsg, 3));
};


/**
 * @param {?proto.rhoapi.Var.WildcardMsg|undefined} value
 * @return {!proto.rhoapi.Var} returns this
*/
proto.rhoapi.Var.prototype.setWildcard = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.rhoapi.Var.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rhoapi.Var} returns this
 */
proto.rhoapi.Var.prototype.clearWildcard = function() {
  return this.setWildcard(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rhoapi.Var.prototype.hasWildcard = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rhoapi.Bundle.prototype.toObject = function(opt_includeInstance) {
  return proto.rhoapi.Bundle.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rhoapi.Bundle} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rhoapi.Bundle.toObject = function(includeInstance, msg) {
  var f, obj = {
    body: (f = msg.getBody()) && proto.rhoapi.Par.toObject(includeInstance, f),
    writeflag: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    readflag: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rhoapi.Bundle}
 */
proto.rhoapi.Bundle.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rhoapi.Bundle;
  return proto.rhoapi.Bundle.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rhoapi.Bundle} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rhoapi.Bundle}
 */
proto.rhoapi.Bundle.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rhoapi.Par;
      reader.readMessage(value,proto.rhoapi.Par.deserializeBinaryFromReader);
      msg.setBody(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setWriteflag(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setReadflag(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rhoapi.Bundle.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rhoapi.Bundle.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rhoapi.Bundle} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rhoapi.Bundle.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBody();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rhoapi.Par.serializeBinaryToWriter
    );
  }
  f = message.getWriteflag();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getReadflag();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional Par body = 1;
 * @return {?proto.rhoapi.Par}
 */
proto.rhoapi.Bundle.prototype.getBody = function() {
  return /** @type{?proto.rhoapi.Par} */ (
    jspb.Message.getWrapperField(this, proto.rhoapi.Par, 1));
};


/**
 * @param {?proto.rhoapi.Par|undefined} value
 * @return {!proto.rhoapi.Bundle} returns this
*/
proto.rhoapi.Bundle.prototype.setBody = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rhoapi.Bundle} returns this
 */
proto.rhoapi.Bundle.prototype.clearBody = function() {
  return this.setBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rhoapi.Bundle.prototype.hasBody = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool writeFlag = 2;
 * @return {boolean}
 */
proto.rhoapi.Bundle.prototype.getWriteflag = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rhoapi.Bundle} returns this
 */
proto.rhoapi.Bundle.prototype.setWriteflag = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool readFlag = 3;
 * @return {boolean}
 */
proto.rhoapi.Bundle.prototype.getReadflag = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rhoapi.Bundle} returns this
 */
proto.rhoapi.Bundle.prototype.setReadflag = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rhoapi.Send.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rhoapi.Send.prototype.toObject = function(opt_includeInstance) {
  return proto.rhoapi.Send.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rhoapi.Send} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rhoapi.Send.toObject = function(includeInstance, msg) {
  var f, obj = {
    chan: (f = msg.getChan()) && proto.rhoapi.Par.toObject(includeInstance, f),
    dataList: jspb.Message.toObjectList(msg.getDataList(),
    proto.rhoapi.Par.toObject, includeInstance),
    persistent: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    locallyfree: msg.getLocallyfree_asB64(),
    connectiveUsed: jspb.Message.getBooleanFieldWithDefault(msg, 6, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rhoapi.Send}
 */
proto.rhoapi.Send.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rhoapi.Send;
  return proto.rhoapi.Send.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rhoapi.Send} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rhoapi.Send}
 */
proto.rhoapi.Send.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rhoapi.Par;
      reader.readMessage(value,proto.rhoapi.Par.deserializeBinaryFromReader);
      msg.setChan(value);
      break;
    case 2:
      var value = new proto.rhoapi.Par;
      reader.readMessage(value,proto.rhoapi.Par.deserializeBinaryFromReader);
      msg.addData(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPersistent(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setLocallyfree(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setConnectiveUsed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rhoapi.Send.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rhoapi.Send.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rhoapi.Send} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rhoapi.Send.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChan();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rhoapi.Par.serializeBinaryToWriter
    );
  }
  f = message.getDataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.rhoapi.Par.serializeBinaryToWriter
    );
  }
  f = message.getPersistent();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getLocallyfree_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getConnectiveUsed();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
};


/**
 * optional Par chan = 1;
 * @return {?proto.rhoapi.Par}
 */
proto.rhoapi.Send.prototype.getChan = function() {
  return /** @type{?proto.rhoapi.Par} */ (
    jspb.Message.getWrapperField(this, proto.rhoapi.Par, 1));
};


/**
 * @param {?proto.rhoapi.Par|undefined} value
 * @return {!proto.rhoapi.Send} returns this
*/
proto.rhoapi.Send.prototype.setChan = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rhoapi.Send} returns this
 */
proto.rhoapi.Send.prototype.clearChan = function() {
  return this.setChan(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rhoapi.Send.prototype.hasChan = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Par data = 2;
 * @return {!Array<!proto.rhoapi.Par>}
 */
proto.rhoapi.Send.prototype.getDataList = function() {
  return /** @type{!Array<!proto.rhoapi.Par>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rhoapi.Par, 2));
};


/**
 * @param {!Array<!proto.rhoapi.Par>} value
 * @return {!proto.rhoapi.Send} returns this
*/
proto.rhoapi.Send.prototype.setDataList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.rhoapi.Par=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rhoapi.Par}
 */
proto.rhoapi.Send.prototype.addData = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.rhoapi.Par, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rhoapi.Send} returns this
 */
proto.rhoapi.Send.prototype.clearDataList = function() {
  return this.setDataList([]);
};


/**
 * optional bool persistent = 3;
 * @return {boolean}
 */
proto.rhoapi.Send.prototype.getPersistent = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rhoapi.Send} returns this
 */
proto.rhoapi.Send.prototype.setPersistent = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bytes locallyFree = 5;
 * @return {!(string|Uint8Array)}
 */
proto.rhoapi.Send.prototype.getLocallyfree = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes locallyFree = 5;
 * This is a type-conversion wrapper around `getLocallyfree()`
 * @return {string}
 */
proto.rhoapi.Send.prototype.getLocallyfree_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getLocallyfree()));
};


/**
 * optional bytes locallyFree = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getLocallyfree()`
 * @return {!Uint8Array}
 */
proto.rhoapi.Send.prototype.getLocallyfree_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getLocallyfree()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.rhoapi.Send} returns this
 */
proto.rhoapi.Send.prototype.setLocallyfree = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional bool connective_used = 6;
 * @return {boolean}
 */
proto.rhoapi.Send.prototype.getConnectiveUsed = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rhoapi.Send} returns this
 */
proto.rhoapi.Send.prototype.setConnectiveUsed = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rhoapi.ReceiveBind.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rhoapi.ReceiveBind.prototype.toObject = function(opt_includeInstance) {
  return proto.rhoapi.ReceiveBind.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rhoapi.ReceiveBind} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rhoapi.ReceiveBind.toObject = function(includeInstance, msg) {
  var f, obj = {
    patternsList: jspb.Message.toObjectList(msg.getPatternsList(),
    proto.rhoapi.Par.toObject, includeInstance),
    source: (f = msg.getSource()) && proto.rhoapi.Par.toObject(includeInstance, f),
    remainder: (f = msg.getRemainder()) && proto.rhoapi.Var.toObject(includeInstance, f),
    freecount: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rhoapi.ReceiveBind}
 */
proto.rhoapi.ReceiveBind.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rhoapi.ReceiveBind;
  return proto.rhoapi.ReceiveBind.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rhoapi.ReceiveBind} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rhoapi.ReceiveBind}
 */
proto.rhoapi.ReceiveBind.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rhoapi.Par;
      reader.readMessage(value,proto.rhoapi.Par.deserializeBinaryFromReader);
      msg.addPatterns(value);
      break;
    case 2:
      var value = new proto.rhoapi.Par;
      reader.readMessage(value,proto.rhoapi.Par.deserializeBinaryFromReader);
      msg.setSource(value);
      break;
    case 3:
      var value = new proto.rhoapi.Var;
      reader.readMessage(value,proto.rhoapi.Var.deserializeBinaryFromReader);
      msg.setRemainder(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFreecount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rhoapi.ReceiveBind.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rhoapi.ReceiveBind.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rhoapi.ReceiveBind} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rhoapi.ReceiveBind.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPatternsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.rhoapi.Par.serializeBinaryToWriter
    );
  }
  f = message.getSource();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rhoapi.Par.serializeBinaryToWriter
    );
  }
  f = message.getRemainder();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.rhoapi.Var.serializeBinaryToWriter
    );
  }
  f = message.getFreecount();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * repeated Par patterns = 1;
 * @return {!Array<!proto.rhoapi.Par>}
 */
proto.rhoapi.ReceiveBind.prototype.getPatternsList = function() {
  return /** @type{!Array<!proto.rhoapi.Par>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rhoapi.Par, 1));
};


/**
 * @param {!Array<!proto.rhoapi.Par>} value
 * @return {!proto.rhoapi.ReceiveBind} returns this
*/
proto.rhoapi.ReceiveBind.prototype.setPatternsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.rhoapi.Par=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rhoapi.Par}
 */
proto.rhoapi.ReceiveBind.prototype.addPatterns = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.rhoapi.Par, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rhoapi.ReceiveBind} returns this
 */
proto.rhoapi.ReceiveBind.prototype.clearPatternsList = function() {
  return this.setPatternsList([]);
};


/**
 * optional Par source = 2;
 * @return {?proto.rhoapi.Par}
 */
proto.rhoapi.ReceiveBind.prototype.getSource = function() {
  return /** @type{?proto.rhoapi.Par} */ (
    jspb.Message.getWrapperField(this, proto.rhoapi.Par, 2));
};


/**
 * @param {?proto.rhoapi.Par|undefined} value
 * @return {!proto.rhoapi.ReceiveBind} returns this
*/
proto.rhoapi.ReceiveBind.prototype.setSource = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rhoapi.ReceiveBind} returns this
 */
proto.rhoapi.ReceiveBind.prototype.clearSource = function() {
  return this.setSource(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rhoapi.ReceiveBind.prototype.hasSource = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Var remainder = 3;
 * @return {?proto.rhoapi.Var}
 */
proto.rhoapi.ReceiveBind.prototype.getRemainder = function() {
  return /** @type{?proto.rhoapi.Var} */ (
    jspb.Message.getWrapperField(this, proto.rhoapi.Var, 3));
};


/**
 * @param {?proto.rhoapi.Var|undefined} value
 * @return {!proto.rhoapi.ReceiveBind} returns this
*/
proto.rhoapi.ReceiveBind.prototype.setRemainder = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rhoapi.ReceiveBind} returns this
 */
proto.rhoapi.ReceiveBind.prototype.clearRemainder = function() {
  return this.setRemainder(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rhoapi.ReceiveBind.prototype.hasRemainder = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 freeCount = 4;
 * @return {number}
 */
proto.rhoapi.ReceiveBind.prototype.getFreecount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.rhoapi.ReceiveBind} returns this
 */
proto.rhoapi.ReceiveBind.prototype.setFreecount = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rhoapi.BindPattern.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rhoapi.BindPattern.prototype.toObject = function(opt_includeInstance) {
  return proto.rhoapi.BindPattern.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rhoapi.BindPattern} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rhoapi.BindPattern.toObject = function(includeInstance, msg) {
  var f, obj = {
    patternsList: jspb.Message.toObjectList(msg.getPatternsList(),
    proto.rhoapi.Par.toObject, includeInstance),
    remainder: (f = msg.getRemainder()) && proto.rhoapi.Var.toObject(includeInstance, f),
    freecount: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rhoapi.BindPattern}
 */
proto.rhoapi.BindPattern.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rhoapi.BindPattern;
  return proto.rhoapi.BindPattern.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rhoapi.BindPattern} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rhoapi.BindPattern}
 */
proto.rhoapi.BindPattern.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rhoapi.Par;
      reader.readMessage(value,proto.rhoapi.Par.deserializeBinaryFromReader);
      msg.addPatterns(value);
      break;
    case 2:
      var value = new proto.rhoapi.Var;
      reader.readMessage(value,proto.rhoapi.Var.deserializeBinaryFromReader);
      msg.setRemainder(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFreecount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rhoapi.BindPattern.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rhoapi.BindPattern.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rhoapi.BindPattern} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rhoapi.BindPattern.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPatternsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.rhoapi.Par.serializeBinaryToWriter
    );
  }
  f = message.getRemainder();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rhoapi.Var.serializeBinaryToWriter
    );
  }
  f = message.getFreecount();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * repeated Par patterns = 1;
 * @return {!Array<!proto.rhoapi.Par>}
 */
proto.rhoapi.BindPattern.prototype.getPatternsList = function() {
  return /** @type{!Array<!proto.rhoapi.Par>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rhoapi.Par, 1));
};


/**
 * @param {!Array<!proto.rhoapi.Par>} value
 * @return {!proto.rhoapi.BindPattern} returns this
*/
proto.rhoapi.BindPattern.prototype.setPatternsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.rhoapi.Par=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rhoapi.Par}
 */
proto.rhoapi.BindPattern.prototype.addPatterns = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.rhoapi.Par, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rhoapi.BindPattern} returns this
 */
proto.rhoapi.BindPattern.prototype.clearPatternsList = function() {
  return this.setPatternsList([]);
};


/**
 * optional Var remainder = 2;
 * @return {?proto.rhoapi.Var}
 */
proto.rhoapi.BindPattern.prototype.getRemainder = function() {
  return /** @type{?proto.rhoapi.Var} */ (
    jspb.Message.getWrapperField(this, proto.rhoapi.Var, 2));
};


/**
 * @param {?proto.rhoapi.Var|undefined} value
 * @return {!proto.rhoapi.BindPattern} returns this
*/
proto.rhoapi.BindPattern.prototype.setRemainder = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rhoapi.BindPattern} returns this
 */
proto.rhoapi.BindPattern.prototype.clearRemainder = function() {
  return this.setRemainder(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rhoapi.BindPattern.prototype.hasRemainder = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 freeCount = 3;
 * @return {number}
 */
proto.rhoapi.BindPattern.prototype.getFreecount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.rhoapi.BindPattern} returns this
 */
proto.rhoapi.BindPattern.prototype.setFreecount = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rhoapi.ListBindPatterns.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rhoapi.ListBindPatterns.prototype.toObject = function(opt_includeInstance) {
  return proto.rhoapi.ListBindPatterns.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rhoapi.ListBindPatterns} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rhoapi.ListBindPatterns.toObject = function(includeInstance, msg) {
  var f, obj = {
    patternsList: jspb.Message.toObjectList(msg.getPatternsList(),
    proto.rhoapi.BindPattern.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rhoapi.ListBindPatterns}
 */
proto.rhoapi.ListBindPatterns.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rhoapi.ListBindPatterns;
  return proto.rhoapi.ListBindPatterns.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rhoapi.ListBindPatterns} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rhoapi.ListBindPatterns}
 */
proto.rhoapi.ListBindPatterns.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rhoapi.BindPattern;
      reader.readMessage(value,proto.rhoapi.BindPattern.deserializeBinaryFromReader);
      msg.addPatterns(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rhoapi.ListBindPatterns.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rhoapi.ListBindPatterns.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rhoapi.ListBindPatterns} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rhoapi.ListBindPatterns.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPatternsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.rhoapi.BindPattern.serializeBinaryToWriter
    );
  }
};


/**
 * repeated BindPattern patterns = 1;
 * @return {!Array<!proto.rhoapi.BindPattern>}
 */
proto.rhoapi.ListBindPatterns.prototype.getPatternsList = function() {
  return /** @type{!Array<!proto.rhoapi.BindPattern>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rhoapi.BindPattern, 1));
};


/**
 * @param {!Array<!proto.rhoapi.BindPattern>} value
 * @return {!proto.rhoapi.ListBindPatterns} returns this
*/
proto.rhoapi.ListBindPatterns.prototype.setPatternsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.rhoapi.BindPattern=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rhoapi.BindPattern}
 */
proto.rhoapi.ListBindPatterns.prototype.addPatterns = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.rhoapi.BindPattern, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rhoapi.ListBindPatterns} returns this
 */
proto.rhoapi.ListBindPatterns.prototype.clearPatternsList = function() {
  return this.setPatternsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rhoapi.Receive.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rhoapi.Receive.prototype.toObject = function(opt_includeInstance) {
  return proto.rhoapi.Receive.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rhoapi.Receive} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rhoapi.Receive.toObject = function(includeInstance, msg) {
  var f, obj = {
    bindsList: jspb.Message.toObjectList(msg.getBindsList(),
    proto.rhoapi.ReceiveBind.toObject, includeInstance),
    body: (f = msg.getBody()) && proto.rhoapi.Par.toObject(includeInstance, f),
    persistent: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    peek: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    bindcount: jspb.Message.getFieldWithDefault(msg, 5, 0),
    locallyfree: msg.getLocallyfree_asB64(),
    connectiveUsed: jspb.Message.getBooleanFieldWithDefault(msg, 7, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rhoapi.Receive}
 */
proto.rhoapi.Receive.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rhoapi.Receive;
  return proto.rhoapi.Receive.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rhoapi.Receive} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rhoapi.Receive}
 */
proto.rhoapi.Receive.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rhoapi.ReceiveBind;
      reader.readMessage(value,proto.rhoapi.ReceiveBind.deserializeBinaryFromReader);
      msg.addBinds(value);
      break;
    case 2:
      var value = new proto.rhoapi.Par;
      reader.readMessage(value,proto.rhoapi.Par.deserializeBinaryFromReader);
      msg.setBody(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPersistent(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPeek(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBindcount(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setLocallyfree(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setConnectiveUsed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rhoapi.Receive.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rhoapi.Receive.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rhoapi.Receive} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rhoapi.Receive.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBindsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.rhoapi.ReceiveBind.serializeBinaryToWriter
    );
  }
  f = message.getBody();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rhoapi.Par.serializeBinaryToWriter
    );
  }
  f = message.getPersistent();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getPeek();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getBindcount();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getLocallyfree_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getConnectiveUsed();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
};


/**
 * repeated ReceiveBind binds = 1;
 * @return {!Array<!proto.rhoapi.ReceiveBind>}
 */
proto.rhoapi.Receive.prototype.getBindsList = function() {
  return /** @type{!Array<!proto.rhoapi.ReceiveBind>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rhoapi.ReceiveBind, 1));
};


/**
 * @param {!Array<!proto.rhoapi.ReceiveBind>} value
 * @return {!proto.rhoapi.Receive} returns this
*/
proto.rhoapi.Receive.prototype.setBindsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.rhoapi.ReceiveBind=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rhoapi.ReceiveBind}
 */
proto.rhoapi.Receive.prototype.addBinds = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.rhoapi.ReceiveBind, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rhoapi.Receive} returns this
 */
proto.rhoapi.Receive.prototype.clearBindsList = function() {
  return this.setBindsList([]);
};


/**
 * optional Par body = 2;
 * @return {?proto.rhoapi.Par}
 */
proto.rhoapi.Receive.prototype.getBody = function() {
  return /** @type{?proto.rhoapi.Par} */ (
    jspb.Message.getWrapperField(this, proto.rhoapi.Par, 2));
};


/**
 * @param {?proto.rhoapi.Par|undefined} value
 * @return {!proto.rhoapi.Receive} returns this
*/
proto.rhoapi.Receive.prototype.setBody = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rhoapi.Receive} returns this
 */
proto.rhoapi.Receive.prototype.clearBody = function() {
  return this.setBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rhoapi.Receive.prototype.hasBody = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool persistent = 3;
 * @return {boolean}
 */
proto.rhoapi.Receive.prototype.getPersistent = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rhoapi.Receive} returns this
 */
proto.rhoapi.Receive.prototype.setPersistent = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool peek = 4;
 * @return {boolean}
 */
proto.rhoapi.Receive.prototype.getPeek = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rhoapi.Receive} returns this
 */
proto.rhoapi.Receive.prototype.setPeek = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional int32 bindCount = 5;
 * @return {number}
 */
proto.rhoapi.Receive.prototype.getBindcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.rhoapi.Receive} returns this
 */
proto.rhoapi.Receive.prototype.setBindcount = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional bytes locallyFree = 6;
 * @return {!(string|Uint8Array)}
 */
proto.rhoapi.Receive.prototype.getLocallyfree = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes locallyFree = 6;
 * This is a type-conversion wrapper around `getLocallyfree()`
 * @return {string}
 */
proto.rhoapi.Receive.prototype.getLocallyfree_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getLocallyfree()));
};


/**
 * optional bytes locallyFree = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getLocallyfree()`
 * @return {!Uint8Array}
 */
proto.rhoapi.Receive.prototype.getLocallyfree_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getLocallyfree()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.rhoapi.Receive} returns this
 */
proto.rhoapi.Receive.prototype.setLocallyfree = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional bool connective_used = 7;
 * @return {boolean}
 */
proto.rhoapi.Receive.prototype.getConnectiveUsed = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rhoapi.Receive} returns this
 */
proto.rhoapi.Receive.prototype.setConnectiveUsed = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rhoapi.New.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rhoapi.New.prototype.toObject = function(opt_includeInstance) {
  return proto.rhoapi.New.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rhoapi.New} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rhoapi.New.toObject = function(includeInstance, msg) {
  var f, obj = {
    bindcount: jspb.Message.getFieldWithDefault(msg, 1, 0),
    p: (f = msg.getP()) && proto.rhoapi.Par.toObject(includeInstance, f),
    uriList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    injectionsMap: (f = msg.getInjectionsMap()) ? f.toObject(includeInstance, proto.rhoapi.Par.toObject) : [],
    locallyfree: msg.getLocallyfree_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rhoapi.New}
 */
proto.rhoapi.New.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rhoapi.New;
  return proto.rhoapi.New.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rhoapi.New} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rhoapi.New}
 */
proto.rhoapi.New.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setBindcount(value);
      break;
    case 2:
      var value = new proto.rhoapi.Par;
      reader.readMessage(value,proto.rhoapi.Par.deserializeBinaryFromReader);
      msg.setP(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addUri(value);
      break;
    case 4:
      var value = msg.getInjectionsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.rhoapi.Par.deserializeBinaryFromReader, "", new proto.rhoapi.Par());
         });
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setLocallyfree(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rhoapi.New.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rhoapi.New.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rhoapi.New} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rhoapi.New.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBindcount();
  if (f !== 0) {
    writer.writeSint32(
      1,
      f
    );
  }
  f = message.getP();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rhoapi.Par.serializeBinaryToWriter
    );
  }
  f = message.getUriList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getInjectionsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.rhoapi.Par.serializeBinaryToWriter);
  }
  f = message.getLocallyfree_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
};


/**
 * optional sint32 bindCount = 1;
 * @return {number}
 */
proto.rhoapi.New.prototype.getBindcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.rhoapi.New} returns this
 */
proto.rhoapi.New.prototype.setBindcount = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional Par p = 2;
 * @return {?proto.rhoapi.Par}
 */
proto.rhoapi.New.prototype.getP = function() {
  return /** @type{?proto.rhoapi.Par} */ (
    jspb.Message.getWrapperField(this, proto.rhoapi.Par, 2));
};


/**
 * @param {?proto.rhoapi.Par|undefined} value
 * @return {!proto.rhoapi.New} returns this
*/
proto.rhoapi.New.prototype.setP = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rhoapi.New} returns this
 */
proto.rhoapi.New.prototype.clearP = function() {
  return this.setP(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rhoapi.New.prototype.hasP = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated string uri = 3;
 * @return {!Array<string>}
 */
proto.rhoapi.New.prototype.getUriList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.rhoapi.New} returns this
 */
proto.rhoapi.New.prototype.setUriList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.rhoapi.New} returns this
 */
proto.rhoapi.New.prototype.addUri = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rhoapi.New} returns this
 */
proto.rhoapi.New.prototype.clearUriList = function() {
  return this.setUriList([]);
};


/**
 * map<string, Par> injections = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.rhoapi.Par>}
 */
proto.rhoapi.New.prototype.getInjectionsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.rhoapi.Par>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      proto.rhoapi.Par));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.rhoapi.New} returns this
 */
proto.rhoapi.New.prototype.clearInjectionsMap = function() {
  this.getInjectionsMap().clear();
  return this;};


/**
 * optional bytes locallyFree = 5;
 * @return {!(string|Uint8Array)}
 */
proto.rhoapi.New.prototype.getLocallyfree = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes locallyFree = 5;
 * This is a type-conversion wrapper around `getLocallyfree()`
 * @return {string}
 */
proto.rhoapi.New.prototype.getLocallyfree_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getLocallyfree()));
};


/**
 * optional bytes locallyFree = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getLocallyfree()`
 * @return {!Uint8Array}
 */
proto.rhoapi.New.prototype.getLocallyfree_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getLocallyfree()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.rhoapi.New} returns this
 */
proto.rhoapi.New.prototype.setLocallyfree = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rhoapi.MatchCase.prototype.toObject = function(opt_includeInstance) {
  return proto.rhoapi.MatchCase.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rhoapi.MatchCase} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rhoapi.MatchCase.toObject = function(includeInstance, msg) {
  var f, obj = {
    pattern: (f = msg.getPattern()) && proto.rhoapi.Par.toObject(includeInstance, f),
    source: (f = msg.getSource()) && proto.rhoapi.Par.toObject(includeInstance, f),
    freecount: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rhoapi.MatchCase}
 */
proto.rhoapi.MatchCase.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rhoapi.MatchCase;
  return proto.rhoapi.MatchCase.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rhoapi.MatchCase} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rhoapi.MatchCase}
 */
proto.rhoapi.MatchCase.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rhoapi.Par;
      reader.readMessage(value,proto.rhoapi.Par.deserializeBinaryFromReader);
      msg.setPattern(value);
      break;
    case 2:
      var value = new proto.rhoapi.Par;
      reader.readMessage(value,proto.rhoapi.Par.deserializeBinaryFromReader);
      msg.setSource(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFreecount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rhoapi.MatchCase.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rhoapi.MatchCase.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rhoapi.MatchCase} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rhoapi.MatchCase.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPattern();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rhoapi.Par.serializeBinaryToWriter
    );
  }
  f = message.getSource();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rhoapi.Par.serializeBinaryToWriter
    );
  }
  f = message.getFreecount();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional Par pattern = 1;
 * @return {?proto.rhoapi.Par}
 */
proto.rhoapi.MatchCase.prototype.getPattern = function() {
  return /** @type{?proto.rhoapi.Par} */ (
    jspb.Message.getWrapperField(this, proto.rhoapi.Par, 1));
};


/**
 * @param {?proto.rhoapi.Par|undefined} value
 * @return {!proto.rhoapi.MatchCase} returns this
*/
proto.rhoapi.MatchCase.prototype.setPattern = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rhoapi.MatchCase} returns this
 */
proto.rhoapi.MatchCase.prototype.clearPattern = function() {
  return this.setPattern(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rhoapi.MatchCase.prototype.hasPattern = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Par source = 2;
 * @return {?proto.rhoapi.Par}
 */
proto.rhoapi.MatchCase.prototype.getSource = function() {
  return /** @type{?proto.rhoapi.Par} */ (
    jspb.Message.getWrapperField(this, proto.rhoapi.Par, 2));
};


/**
 * @param {?proto.rhoapi.Par|undefined} value
 * @return {!proto.rhoapi.MatchCase} returns this
*/
proto.rhoapi.MatchCase.prototype.setSource = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rhoapi.MatchCase} returns this
 */
proto.rhoapi.MatchCase.prototype.clearSource = function() {
  return this.setSource(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rhoapi.MatchCase.prototype.hasSource = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 freeCount = 3;
 * @return {number}
 */
proto.rhoapi.MatchCase.prototype.getFreecount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.rhoapi.MatchCase} returns this
 */
proto.rhoapi.MatchCase.prototype.setFreecount = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rhoapi.Match.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rhoapi.Match.prototype.toObject = function(opt_includeInstance) {
  return proto.rhoapi.Match.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rhoapi.Match} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rhoapi.Match.toObject = function(includeInstance, msg) {
  var f, obj = {
    target: (f = msg.getTarget()) && proto.rhoapi.Par.toObject(includeInstance, f),
    casesList: jspb.Message.toObjectList(msg.getCasesList(),
    proto.rhoapi.MatchCase.toObject, includeInstance),
    locallyfree: msg.getLocallyfree_asB64(),
    connectiveUsed: jspb.Message.getBooleanFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rhoapi.Match}
 */
proto.rhoapi.Match.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rhoapi.Match;
  return proto.rhoapi.Match.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rhoapi.Match} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rhoapi.Match}
 */
proto.rhoapi.Match.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rhoapi.Par;
      reader.readMessage(value,proto.rhoapi.Par.deserializeBinaryFromReader);
      msg.setTarget(value);
      break;
    case 2:
      var value = new proto.rhoapi.MatchCase;
      reader.readMessage(value,proto.rhoapi.MatchCase.deserializeBinaryFromReader);
      msg.addCases(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setLocallyfree(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setConnectiveUsed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rhoapi.Match.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rhoapi.Match.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rhoapi.Match} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rhoapi.Match.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTarget();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rhoapi.Par.serializeBinaryToWriter
    );
  }
  f = message.getCasesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.rhoapi.MatchCase.serializeBinaryToWriter
    );
  }
  f = message.getLocallyfree_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getConnectiveUsed();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional Par target = 1;
 * @return {?proto.rhoapi.Par}
 */
proto.rhoapi.Match.prototype.getTarget = function() {
  return /** @type{?proto.rhoapi.Par} */ (
    jspb.Message.getWrapperField(this, proto.rhoapi.Par, 1));
};


/**
 * @param {?proto.rhoapi.Par|undefined} value
 * @return {!proto.rhoapi.Match} returns this
*/
proto.rhoapi.Match.prototype.setTarget = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rhoapi.Match} returns this
 */
proto.rhoapi.Match.prototype.clearTarget = function() {
  return this.setTarget(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rhoapi.Match.prototype.hasTarget = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated MatchCase cases = 2;
 * @return {!Array<!proto.rhoapi.MatchCase>}
 */
proto.rhoapi.Match.prototype.getCasesList = function() {
  return /** @type{!Array<!proto.rhoapi.MatchCase>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rhoapi.MatchCase, 2));
};


/**
 * @param {!Array<!proto.rhoapi.MatchCase>} value
 * @return {!proto.rhoapi.Match} returns this
*/
proto.rhoapi.Match.prototype.setCasesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.rhoapi.MatchCase=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rhoapi.MatchCase}
 */
proto.rhoapi.Match.prototype.addCases = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.rhoapi.MatchCase, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rhoapi.Match} returns this
 */
proto.rhoapi.Match.prototype.clearCasesList = function() {
  return this.setCasesList([]);
};


/**
 * optional bytes locallyFree = 4;
 * @return {!(string|Uint8Array)}
 */
proto.rhoapi.Match.prototype.getLocallyfree = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes locallyFree = 4;
 * This is a type-conversion wrapper around `getLocallyfree()`
 * @return {string}
 */
proto.rhoapi.Match.prototype.getLocallyfree_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getLocallyfree()));
};


/**
 * optional bytes locallyFree = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getLocallyfree()`
 * @return {!Uint8Array}
 */
proto.rhoapi.Match.prototype.getLocallyfree_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getLocallyfree()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.rhoapi.Match} returns this
 */
proto.rhoapi.Match.prototype.setLocallyfree = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional bool connective_used = 5;
 * @return {boolean}
 */
proto.rhoapi.Match.prototype.getConnectiveUsed = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rhoapi.Match} returns this
 */
proto.rhoapi.Match.prototype.setConnectiveUsed = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.rhoapi.Expr.oneofGroups_ = [[1,2,3,4,25,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,27,28,29,30,31]];

/**
 * @enum {number}
 */
proto.rhoapi.Expr.ExprInstanceCase = {
  EXPR_INSTANCE_NOT_SET: 0,
  G_BOOL: 1,
  G_INT: 2,
  G_STRING: 3,
  G_URI: 4,
  G_BYTE_ARRAY: 25,
  E_NOT_BODY: 5,
  E_NEG_BODY: 6,
  E_MULT_BODY: 7,
  E_DIV_BODY: 8,
  E_PLUS_BODY: 9,
  E_MINUS_BODY: 10,
  E_LT_BODY: 11,
  E_LTE_BODY: 12,
  E_GT_BODY: 13,
  E_GTE_BODY: 14,
  E_EQ_BODY: 15,
  E_NEQ_BODY: 16,
  E_AND_BODY: 17,
  E_OR_BODY: 18,
  E_VAR_BODY: 19,
  E_LIST_BODY: 20,
  E_TUPLE_BODY: 21,
  E_SET_BODY: 22,
  E_MAP_BODY: 23,
  E_METHOD_BODY: 24,
  E_MATCHES_BODY: 27,
  E_PERCENT_PERCENT_BODY: 28,
  E_PLUS_PLUS_BODY: 29,
  E_MINUS_MINUS_BODY: 30,
  E_MOD_BODY: 31
};

/**
 * @return {proto.rhoapi.Expr.ExprInstanceCase}
 */
proto.rhoapi.Expr.prototype.getExprInstanceCase = function() {
  return /** @type {proto.rhoapi.Expr.ExprInstanceCase} */(jspb.Message.computeOneofCase(this, proto.rhoapi.Expr.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rhoapi.Expr.prototype.toObject = function(opt_includeInstance) {
  return proto.rhoapi.Expr.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rhoapi.Expr} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rhoapi.Expr.toObject = function(includeInstance, msg) {
  var f, obj = {
    gBool: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    gInt: jspb.Message.getFieldWithDefault(msg, 2, 0),
    gString: jspb.Message.getFieldWithDefault(msg, 3, ""),
    gUri: jspb.Message.getFieldWithDefault(msg, 4, ""),
    gByteArray: msg.getGByteArray_asB64(),
    eNotBody: (f = msg.getENotBody()) && proto.rhoapi.ENot.toObject(includeInstance, f),
    eNegBody: (f = msg.getENegBody()) && proto.rhoapi.ENeg.toObject(includeInstance, f),
    eMultBody: (f = msg.getEMultBody()) && proto.rhoapi.EMult.toObject(includeInstance, f),
    eDivBody: (f = msg.getEDivBody()) && proto.rhoapi.EDiv.toObject(includeInstance, f),
    ePlusBody: (f = msg.getEPlusBody()) && proto.rhoapi.EPlus.toObject(includeInstance, f),
    eMinusBody: (f = msg.getEMinusBody()) && proto.rhoapi.EMinus.toObject(includeInstance, f),
    eLtBody: (f = msg.getELtBody()) && proto.rhoapi.ELt.toObject(includeInstance, f),
    eLteBody: (f = msg.getELteBody()) && proto.rhoapi.ELte.toObject(includeInstance, f),
    eGtBody: (f = msg.getEGtBody()) && proto.rhoapi.EGt.toObject(includeInstance, f),
    eGteBody: (f = msg.getEGteBody()) && proto.rhoapi.EGte.toObject(includeInstance, f),
    eEqBody: (f = msg.getEEqBody()) && proto.rhoapi.EEq.toObject(includeInstance, f),
    eNeqBody: (f = msg.getENeqBody()) && proto.rhoapi.ENeq.toObject(includeInstance, f),
    eAndBody: (f = msg.getEAndBody()) && proto.rhoapi.EAnd.toObject(includeInstance, f),
    eOrBody: (f = msg.getEOrBody()) && proto.rhoapi.EOr.toObject(includeInstance, f),
    eVarBody: (f = msg.getEVarBody()) && proto.rhoapi.EVar.toObject(includeInstance, f),
    eListBody: (f = msg.getEListBody()) && proto.rhoapi.EList.toObject(includeInstance, f),
    eTupleBody: (f = msg.getETupleBody()) && proto.rhoapi.ETuple.toObject(includeInstance, f),
    eSetBody: (f = msg.getESetBody()) && proto.rhoapi.ESet.toObject(includeInstance, f),
    eMapBody: (f = msg.getEMapBody()) && proto.rhoapi.EMap.toObject(includeInstance, f),
    eMethodBody: (f = msg.getEMethodBody()) && proto.rhoapi.EMethod.toObject(includeInstance, f),
    eMatchesBody: (f = msg.getEMatchesBody()) && proto.rhoapi.EMatches.toObject(includeInstance, f),
    ePercentPercentBody: (f = msg.getEPercentPercentBody()) && proto.rhoapi.EPercentPercent.toObject(includeInstance, f),
    ePlusPlusBody: (f = msg.getEPlusPlusBody()) && proto.rhoapi.EPlusPlus.toObject(includeInstance, f),
    eMinusMinusBody: (f = msg.getEMinusMinusBody()) && proto.rhoapi.EMinusMinus.toObject(includeInstance, f),
    eModBody: (f = msg.getEModBody()) && proto.rhoapi.EMod.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rhoapi.Expr}
 */
proto.rhoapi.Expr.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rhoapi.Expr;
  return proto.rhoapi.Expr.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rhoapi.Expr} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rhoapi.Expr}
 */
proto.rhoapi.Expr.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setGBool(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readSint64());
      msg.setGInt(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setGString(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setGUri(value);
      break;
    case 25:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setGByteArray(value);
      break;
    case 5:
      var value = new proto.rhoapi.ENot;
      reader.readMessage(value,proto.rhoapi.ENot.deserializeBinaryFromReader);
      msg.setENotBody(value);
      break;
    case 6:
      var value = new proto.rhoapi.ENeg;
      reader.readMessage(value,proto.rhoapi.ENeg.deserializeBinaryFromReader);
      msg.setENegBody(value);
      break;
    case 7:
      var value = new proto.rhoapi.EMult;
      reader.readMessage(value,proto.rhoapi.EMult.deserializeBinaryFromReader);
      msg.setEMultBody(value);
      break;
    case 8:
      var value = new proto.rhoapi.EDiv;
      reader.readMessage(value,proto.rhoapi.EDiv.deserializeBinaryFromReader);
      msg.setEDivBody(value);
      break;
    case 9:
      var value = new proto.rhoapi.EPlus;
      reader.readMessage(value,proto.rhoapi.EPlus.deserializeBinaryFromReader);
      msg.setEPlusBody(value);
      break;
    case 10:
      var value = new proto.rhoapi.EMinus;
      reader.readMessage(value,proto.rhoapi.EMinus.deserializeBinaryFromReader);
      msg.setEMinusBody(value);
      break;
    case 11:
      var value = new proto.rhoapi.ELt;
      reader.readMessage(value,proto.rhoapi.ELt.deserializeBinaryFromReader);
      msg.setELtBody(value);
      break;
    case 12:
      var value = new proto.rhoapi.ELte;
      reader.readMessage(value,proto.rhoapi.ELte.deserializeBinaryFromReader);
      msg.setELteBody(value);
      break;
    case 13:
      var value = new proto.rhoapi.EGt;
      reader.readMessage(value,proto.rhoapi.EGt.deserializeBinaryFromReader);
      msg.setEGtBody(value);
      break;
    case 14:
      var value = new proto.rhoapi.EGte;
      reader.readMessage(value,proto.rhoapi.EGte.deserializeBinaryFromReader);
      msg.setEGteBody(value);
      break;
    case 15:
      var value = new proto.rhoapi.EEq;
      reader.readMessage(value,proto.rhoapi.EEq.deserializeBinaryFromReader);
      msg.setEEqBody(value);
      break;
    case 16:
      var value = new proto.rhoapi.ENeq;
      reader.readMessage(value,proto.rhoapi.ENeq.deserializeBinaryFromReader);
      msg.setENeqBody(value);
      break;
    case 17:
      var value = new proto.rhoapi.EAnd;
      reader.readMessage(value,proto.rhoapi.EAnd.deserializeBinaryFromReader);
      msg.setEAndBody(value);
      break;
    case 18:
      var value = new proto.rhoapi.EOr;
      reader.readMessage(value,proto.rhoapi.EOr.deserializeBinaryFromReader);
      msg.setEOrBody(value);
      break;
    case 19:
      var value = new proto.rhoapi.EVar;
      reader.readMessage(value,proto.rhoapi.EVar.deserializeBinaryFromReader);
      msg.setEVarBody(value);
      break;
    case 20:
      var value = new proto.rhoapi.EList;
      reader.readMessage(value,proto.rhoapi.EList.deserializeBinaryFromReader);
      msg.setEListBody(value);
      break;
    case 21:
      var value = new proto.rhoapi.ETuple;
      reader.readMessage(value,proto.rhoapi.ETuple.deserializeBinaryFromReader);
      msg.setETupleBody(value);
      break;
    case 22:
      var value = new proto.rhoapi.ESet;
      reader.readMessage(value,proto.rhoapi.ESet.deserializeBinaryFromReader);
      msg.setESetBody(value);
      break;
    case 23:
      var value = new proto.rhoapi.EMap;
      reader.readMessage(value,proto.rhoapi.EMap.deserializeBinaryFromReader);
      msg.setEMapBody(value);
      break;
    case 24:
      var value = new proto.rhoapi.EMethod;
      reader.readMessage(value,proto.rhoapi.EMethod.deserializeBinaryFromReader);
      msg.setEMethodBody(value);
      break;
    case 27:
      var value = new proto.rhoapi.EMatches;
      reader.readMessage(value,proto.rhoapi.EMatches.deserializeBinaryFromReader);
      msg.setEMatchesBody(value);
      break;
    case 28:
      var value = new proto.rhoapi.EPercentPercent;
      reader.readMessage(value,proto.rhoapi.EPercentPercent.deserializeBinaryFromReader);
      msg.setEPercentPercentBody(value);
      break;
    case 29:
      var value = new proto.rhoapi.EPlusPlus;
      reader.readMessage(value,proto.rhoapi.EPlusPlus.deserializeBinaryFromReader);
      msg.setEPlusPlusBody(value);
      break;
    case 30:
      var value = new proto.rhoapi.EMinusMinus;
      reader.readMessage(value,proto.rhoapi.EMinusMinus.deserializeBinaryFromReader);
      msg.setEMinusMinusBody(value);
      break;
    case 31:
      var value = new proto.rhoapi.EMod;
      reader.readMessage(value,proto.rhoapi.EMod.deserializeBinaryFromReader);
      msg.setEModBody(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rhoapi.Expr.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rhoapi.Expr.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rhoapi.Expr} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rhoapi.Expr.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeSint64(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 25));
  if (f != null) {
    writer.writeBytes(
      25,
      f
    );
  }
  f = message.getENotBody();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.rhoapi.ENot.serializeBinaryToWriter
    );
  }
  f = message.getENegBody();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.rhoapi.ENeg.serializeBinaryToWriter
    );
  }
  f = message.getEMultBody();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.rhoapi.EMult.serializeBinaryToWriter
    );
  }
  f = message.getEDivBody();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.rhoapi.EDiv.serializeBinaryToWriter
    );
  }
  f = message.getEPlusBody();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.rhoapi.EPlus.serializeBinaryToWriter
    );
  }
  f = message.getEMinusBody();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.rhoapi.EMinus.serializeBinaryToWriter
    );
  }
  f = message.getELtBody();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.rhoapi.ELt.serializeBinaryToWriter
    );
  }
  f = message.getELteBody();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.rhoapi.ELte.serializeBinaryToWriter
    );
  }
  f = message.getEGtBody();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.rhoapi.EGt.serializeBinaryToWriter
    );
  }
  f = message.getEGteBody();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.rhoapi.EGte.serializeBinaryToWriter
    );
  }
  f = message.getEEqBody();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.rhoapi.EEq.serializeBinaryToWriter
    );
  }
  f = message.getENeqBody();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.rhoapi.ENeq.serializeBinaryToWriter
    );
  }
  f = message.getEAndBody();
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      proto.rhoapi.EAnd.serializeBinaryToWriter
    );
  }
  f = message.getEOrBody();
  if (f != null) {
    writer.writeMessage(
      18,
      f,
      proto.rhoapi.EOr.serializeBinaryToWriter
    );
  }
  f = message.getEVarBody();
  if (f != null) {
    writer.writeMessage(
      19,
      f,
      proto.rhoapi.EVar.serializeBinaryToWriter
    );
  }
  f = message.getEListBody();
  if (f != null) {
    writer.writeMessage(
      20,
      f,
      proto.rhoapi.EList.serializeBinaryToWriter
    );
  }
  f = message.getETupleBody();
  if (f != null) {
    writer.writeMessage(
      21,
      f,
      proto.rhoapi.ETuple.serializeBinaryToWriter
    );
  }
  f = message.getESetBody();
  if (f != null) {
    writer.writeMessage(
      22,
      f,
      proto.rhoapi.ESet.serializeBinaryToWriter
    );
  }
  f = message.getEMapBody();
  if (f != null) {
    writer.writeMessage(
      23,
      f,
      proto.rhoapi.EMap.serializeBinaryToWriter
    );
  }
  f = message.getEMethodBody();
  if (f != null) {
    writer.writeMessage(
      24,
      f,
      proto.rhoapi.EMethod.serializeBinaryToWriter
    );
  }
  f = message.getEMatchesBody();
  if (f != null) {
    writer.writeMessage(
      27,
      f,
      proto.rhoapi.EMatches.serializeBinaryToWriter
    );
  }
  f = message.getEPercentPercentBody();
  if (f != null) {
    writer.writeMessage(
      28,
      f,
      proto.rhoapi.EPercentPercent.serializeBinaryToWriter
    );
  }
  f = message.getEPlusPlusBody();
  if (f != null) {
    writer.writeMessage(
      29,
      f,
      proto.rhoapi.EPlusPlus.serializeBinaryToWriter
    );
  }
  f = message.getEMinusMinusBody();
  if (f != null) {
    writer.writeMessage(
      30,
      f,
      proto.rhoapi.EMinusMinus.serializeBinaryToWriter
    );
  }
  f = message.getEModBody();
  if (f != null) {
    writer.writeMessage(
      31,
      f,
      proto.rhoapi.EMod.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool g_bool = 1;
 * @return {boolean}
 */
proto.rhoapi.Expr.prototype.getGBool = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rhoapi.Expr} returns this
 */
proto.rhoapi.Expr.prototype.setGBool = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.rhoapi.Expr.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.rhoapi.Expr} returns this
 */
proto.rhoapi.Expr.prototype.clearGBool = function() {
  return jspb.Message.setOneofField(this, 1, proto.rhoapi.Expr.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rhoapi.Expr.prototype.hasGBool = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional sint64 g_int = 2;
 * @return {number}
 */
proto.rhoapi.Expr.prototype.getGInt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.rhoapi.Expr} returns this
 */
proto.rhoapi.Expr.prototype.setGInt = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.rhoapi.Expr.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.rhoapi.Expr} returns this
 */
proto.rhoapi.Expr.prototype.clearGInt = function() {
  return jspb.Message.setOneofField(this, 2, proto.rhoapi.Expr.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rhoapi.Expr.prototype.hasGInt = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string g_string = 3;
 * @return {string}
 */
proto.rhoapi.Expr.prototype.getGString = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.rhoapi.Expr} returns this
 */
proto.rhoapi.Expr.prototype.setGString = function(value) {
  return jspb.Message.setOneofField(this, 3, proto.rhoapi.Expr.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.rhoapi.Expr} returns this
 */
proto.rhoapi.Expr.prototype.clearGString = function() {
  return jspb.Message.setOneofField(this, 3, proto.rhoapi.Expr.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rhoapi.Expr.prototype.hasGString = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string g_uri = 4;
 * @return {string}
 */
proto.rhoapi.Expr.prototype.getGUri = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.rhoapi.Expr} returns this
 */
proto.rhoapi.Expr.prototype.setGUri = function(value) {
  return jspb.Message.setOneofField(this, 4, proto.rhoapi.Expr.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.rhoapi.Expr} returns this
 */
proto.rhoapi.Expr.prototype.clearGUri = function() {
  return jspb.Message.setOneofField(this, 4, proto.rhoapi.Expr.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rhoapi.Expr.prototype.hasGUri = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bytes g_byte_array = 25;
 * @return {!(string|Uint8Array)}
 */
proto.rhoapi.Expr.prototype.getGByteArray = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 25, ""));
};


/**
 * optional bytes g_byte_array = 25;
 * This is a type-conversion wrapper around `getGByteArray()`
 * @return {string}
 */
proto.rhoapi.Expr.prototype.getGByteArray_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getGByteArray()));
};


/**
 * optional bytes g_byte_array = 25;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getGByteArray()`
 * @return {!Uint8Array}
 */
proto.rhoapi.Expr.prototype.getGByteArray_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getGByteArray()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.rhoapi.Expr} returns this
 */
proto.rhoapi.Expr.prototype.setGByteArray = function(value) {
  return jspb.Message.setOneofField(this, 25, proto.rhoapi.Expr.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.rhoapi.Expr} returns this
 */
proto.rhoapi.Expr.prototype.clearGByteArray = function() {
  return jspb.Message.setOneofField(this, 25, proto.rhoapi.Expr.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rhoapi.Expr.prototype.hasGByteArray = function() {
  return jspb.Message.getField(this, 25) != null;
};


/**
 * optional ENot e_not_body = 5;
 * @return {?proto.rhoapi.ENot}
 */
proto.rhoapi.Expr.prototype.getENotBody = function() {
  return /** @type{?proto.rhoapi.ENot} */ (
    jspb.Message.getWrapperField(this, proto.rhoapi.ENot, 5));
};


/**
 * @param {?proto.rhoapi.ENot|undefined} value
 * @return {!proto.rhoapi.Expr} returns this
*/
proto.rhoapi.Expr.prototype.setENotBody = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.rhoapi.Expr.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rhoapi.Expr} returns this
 */
proto.rhoapi.Expr.prototype.clearENotBody = function() {
  return this.setENotBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rhoapi.Expr.prototype.hasENotBody = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional ENeg e_neg_body = 6;
 * @return {?proto.rhoapi.ENeg}
 */
proto.rhoapi.Expr.prototype.getENegBody = function() {
  return /** @type{?proto.rhoapi.ENeg} */ (
    jspb.Message.getWrapperField(this, proto.rhoapi.ENeg, 6));
};


/**
 * @param {?proto.rhoapi.ENeg|undefined} value
 * @return {!proto.rhoapi.Expr} returns this
*/
proto.rhoapi.Expr.prototype.setENegBody = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.rhoapi.Expr.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rhoapi.Expr} returns this
 */
proto.rhoapi.Expr.prototype.clearENegBody = function() {
  return this.setENegBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rhoapi.Expr.prototype.hasENegBody = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional EMult e_mult_body = 7;
 * @return {?proto.rhoapi.EMult}
 */
proto.rhoapi.Expr.prototype.getEMultBody = function() {
  return /** @type{?proto.rhoapi.EMult} */ (
    jspb.Message.getWrapperField(this, proto.rhoapi.EMult, 7));
};


/**
 * @param {?proto.rhoapi.EMult|undefined} value
 * @return {!proto.rhoapi.Expr} returns this
*/
proto.rhoapi.Expr.prototype.setEMultBody = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.rhoapi.Expr.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rhoapi.Expr} returns this
 */
proto.rhoapi.Expr.prototype.clearEMultBody = function() {
  return this.setEMultBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rhoapi.Expr.prototype.hasEMultBody = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional EDiv e_div_body = 8;
 * @return {?proto.rhoapi.EDiv}
 */
proto.rhoapi.Expr.prototype.getEDivBody = function() {
  return /** @type{?proto.rhoapi.EDiv} */ (
    jspb.Message.getWrapperField(this, proto.rhoapi.EDiv, 8));
};


/**
 * @param {?proto.rhoapi.EDiv|undefined} value
 * @return {!proto.rhoapi.Expr} returns this
*/
proto.rhoapi.Expr.prototype.setEDivBody = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.rhoapi.Expr.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rhoapi.Expr} returns this
 */
proto.rhoapi.Expr.prototype.clearEDivBody = function() {
  return this.setEDivBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rhoapi.Expr.prototype.hasEDivBody = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional EPlus e_plus_body = 9;
 * @return {?proto.rhoapi.EPlus}
 */
proto.rhoapi.Expr.prototype.getEPlusBody = function() {
  return /** @type{?proto.rhoapi.EPlus} */ (
    jspb.Message.getWrapperField(this, proto.rhoapi.EPlus, 9));
};


/**
 * @param {?proto.rhoapi.EPlus|undefined} value
 * @return {!proto.rhoapi.Expr} returns this
*/
proto.rhoapi.Expr.prototype.setEPlusBody = function(value) {
  return jspb.Message.setOneofWrapperField(this, 9, proto.rhoapi.Expr.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rhoapi.Expr} returns this
 */
proto.rhoapi.Expr.prototype.clearEPlusBody = function() {
  return this.setEPlusBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rhoapi.Expr.prototype.hasEPlusBody = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional EMinus e_minus_body = 10;
 * @return {?proto.rhoapi.EMinus}
 */
proto.rhoapi.Expr.prototype.getEMinusBody = function() {
  return /** @type{?proto.rhoapi.EMinus} */ (
    jspb.Message.getWrapperField(this, proto.rhoapi.EMinus, 10));
};


/**
 * @param {?proto.rhoapi.EMinus|undefined} value
 * @return {!proto.rhoapi.Expr} returns this
*/
proto.rhoapi.Expr.prototype.setEMinusBody = function(value) {
  return jspb.Message.setOneofWrapperField(this, 10, proto.rhoapi.Expr.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rhoapi.Expr} returns this
 */
proto.rhoapi.Expr.prototype.clearEMinusBody = function() {
  return this.setEMinusBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rhoapi.Expr.prototype.hasEMinusBody = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional ELt e_lt_body = 11;
 * @return {?proto.rhoapi.ELt}
 */
proto.rhoapi.Expr.prototype.getELtBody = function() {
  return /** @type{?proto.rhoapi.ELt} */ (
    jspb.Message.getWrapperField(this, proto.rhoapi.ELt, 11));
};


/**
 * @param {?proto.rhoapi.ELt|undefined} value
 * @return {!proto.rhoapi.Expr} returns this
*/
proto.rhoapi.Expr.prototype.setELtBody = function(value) {
  return jspb.Message.setOneofWrapperField(this, 11, proto.rhoapi.Expr.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rhoapi.Expr} returns this
 */
proto.rhoapi.Expr.prototype.clearELtBody = function() {
  return this.setELtBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rhoapi.Expr.prototype.hasELtBody = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional ELte e_lte_body = 12;
 * @return {?proto.rhoapi.ELte}
 */
proto.rhoapi.Expr.prototype.getELteBody = function() {
  return /** @type{?proto.rhoapi.ELte} */ (
    jspb.Message.getWrapperField(this, proto.rhoapi.ELte, 12));
};


/**
 * @param {?proto.rhoapi.ELte|undefined} value
 * @return {!proto.rhoapi.Expr} returns this
*/
proto.rhoapi.Expr.prototype.setELteBody = function(value) {
  return jspb.Message.setOneofWrapperField(this, 12, proto.rhoapi.Expr.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rhoapi.Expr} returns this
 */
proto.rhoapi.Expr.prototype.clearELteBody = function() {
  return this.setELteBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rhoapi.Expr.prototype.hasELteBody = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional EGt e_gt_body = 13;
 * @return {?proto.rhoapi.EGt}
 */
proto.rhoapi.Expr.prototype.getEGtBody = function() {
  return /** @type{?proto.rhoapi.EGt} */ (
    jspb.Message.getWrapperField(this, proto.rhoapi.EGt, 13));
};


/**
 * @param {?proto.rhoapi.EGt|undefined} value
 * @return {!proto.rhoapi.Expr} returns this
*/
proto.rhoapi.Expr.prototype.setEGtBody = function(value) {
  return jspb.Message.setOneofWrapperField(this, 13, proto.rhoapi.Expr.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rhoapi.Expr} returns this
 */
proto.rhoapi.Expr.prototype.clearEGtBody = function() {
  return this.setEGtBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rhoapi.Expr.prototype.hasEGtBody = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional EGte e_gte_body = 14;
 * @return {?proto.rhoapi.EGte}
 */
proto.rhoapi.Expr.prototype.getEGteBody = function() {
  return /** @type{?proto.rhoapi.EGte} */ (
    jspb.Message.getWrapperField(this, proto.rhoapi.EGte, 14));
};


/**
 * @param {?proto.rhoapi.EGte|undefined} value
 * @return {!proto.rhoapi.Expr} returns this
*/
proto.rhoapi.Expr.prototype.setEGteBody = function(value) {
  return jspb.Message.setOneofWrapperField(this, 14, proto.rhoapi.Expr.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rhoapi.Expr} returns this
 */
proto.rhoapi.Expr.prototype.clearEGteBody = function() {
  return this.setEGteBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rhoapi.Expr.prototype.hasEGteBody = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional EEq e_eq_body = 15;
 * @return {?proto.rhoapi.EEq}
 */
proto.rhoapi.Expr.prototype.getEEqBody = function() {
  return /** @type{?proto.rhoapi.EEq} */ (
    jspb.Message.getWrapperField(this, proto.rhoapi.EEq, 15));
};


/**
 * @param {?proto.rhoapi.EEq|undefined} value
 * @return {!proto.rhoapi.Expr} returns this
*/
proto.rhoapi.Expr.prototype.setEEqBody = function(value) {
  return jspb.Message.setOneofWrapperField(this, 15, proto.rhoapi.Expr.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rhoapi.Expr} returns this
 */
proto.rhoapi.Expr.prototype.clearEEqBody = function() {
  return this.setEEqBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rhoapi.Expr.prototype.hasEEqBody = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional ENeq e_neq_body = 16;
 * @return {?proto.rhoapi.ENeq}
 */
proto.rhoapi.Expr.prototype.getENeqBody = function() {
  return /** @type{?proto.rhoapi.ENeq} */ (
    jspb.Message.getWrapperField(this, proto.rhoapi.ENeq, 16));
};


/**
 * @param {?proto.rhoapi.ENeq|undefined} value
 * @return {!proto.rhoapi.Expr} returns this
*/
proto.rhoapi.Expr.prototype.setENeqBody = function(value) {
  return jspb.Message.setOneofWrapperField(this, 16, proto.rhoapi.Expr.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rhoapi.Expr} returns this
 */
proto.rhoapi.Expr.prototype.clearENeqBody = function() {
  return this.setENeqBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rhoapi.Expr.prototype.hasENeqBody = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional EAnd e_and_body = 17;
 * @return {?proto.rhoapi.EAnd}
 */
proto.rhoapi.Expr.prototype.getEAndBody = function() {
  return /** @type{?proto.rhoapi.EAnd} */ (
    jspb.Message.getWrapperField(this, proto.rhoapi.EAnd, 17));
};


/**
 * @param {?proto.rhoapi.EAnd|undefined} value
 * @return {!proto.rhoapi.Expr} returns this
*/
proto.rhoapi.Expr.prototype.setEAndBody = function(value) {
  return jspb.Message.setOneofWrapperField(this, 17, proto.rhoapi.Expr.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rhoapi.Expr} returns this
 */
proto.rhoapi.Expr.prototype.clearEAndBody = function() {
  return this.setEAndBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rhoapi.Expr.prototype.hasEAndBody = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional EOr e_or_body = 18;
 * @return {?proto.rhoapi.EOr}
 */
proto.rhoapi.Expr.prototype.getEOrBody = function() {
  return /** @type{?proto.rhoapi.EOr} */ (
    jspb.Message.getWrapperField(this, proto.rhoapi.EOr, 18));
};


/**
 * @param {?proto.rhoapi.EOr|undefined} value
 * @return {!proto.rhoapi.Expr} returns this
*/
proto.rhoapi.Expr.prototype.setEOrBody = function(value) {
  return jspb.Message.setOneofWrapperField(this, 18, proto.rhoapi.Expr.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rhoapi.Expr} returns this
 */
proto.rhoapi.Expr.prototype.clearEOrBody = function() {
  return this.setEOrBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rhoapi.Expr.prototype.hasEOrBody = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional EVar e_var_body = 19;
 * @return {?proto.rhoapi.EVar}
 */
proto.rhoapi.Expr.prototype.getEVarBody = function() {
  return /** @type{?proto.rhoapi.EVar} */ (
    jspb.Message.getWrapperField(this, proto.rhoapi.EVar, 19));
};


/**
 * @param {?proto.rhoapi.EVar|undefined} value
 * @return {!proto.rhoapi.Expr} returns this
*/
proto.rhoapi.Expr.prototype.setEVarBody = function(value) {
  return jspb.Message.setOneofWrapperField(this, 19, proto.rhoapi.Expr.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rhoapi.Expr} returns this
 */
proto.rhoapi.Expr.prototype.clearEVarBody = function() {
  return this.setEVarBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rhoapi.Expr.prototype.hasEVarBody = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional EList e_list_body = 20;
 * @return {?proto.rhoapi.EList}
 */
proto.rhoapi.Expr.prototype.getEListBody = function() {
  return /** @type{?proto.rhoapi.EList} */ (
    jspb.Message.getWrapperField(this, proto.rhoapi.EList, 20));
};


/**
 * @param {?proto.rhoapi.EList|undefined} value
 * @return {!proto.rhoapi.Expr} returns this
*/
proto.rhoapi.Expr.prototype.setEListBody = function(value) {
  return jspb.Message.setOneofWrapperField(this, 20, proto.rhoapi.Expr.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rhoapi.Expr} returns this
 */
proto.rhoapi.Expr.prototype.clearEListBody = function() {
  return this.setEListBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rhoapi.Expr.prototype.hasEListBody = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional ETuple e_tuple_body = 21;
 * @return {?proto.rhoapi.ETuple}
 */
proto.rhoapi.Expr.prototype.getETupleBody = function() {
  return /** @type{?proto.rhoapi.ETuple} */ (
    jspb.Message.getWrapperField(this, proto.rhoapi.ETuple, 21));
};


/**
 * @param {?proto.rhoapi.ETuple|undefined} value
 * @return {!proto.rhoapi.Expr} returns this
*/
proto.rhoapi.Expr.prototype.setETupleBody = function(value) {
  return jspb.Message.setOneofWrapperField(this, 21, proto.rhoapi.Expr.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rhoapi.Expr} returns this
 */
proto.rhoapi.Expr.prototype.clearETupleBody = function() {
  return this.setETupleBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rhoapi.Expr.prototype.hasETupleBody = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * optional ESet e_set_body = 22;
 * @return {?proto.rhoapi.ESet}
 */
proto.rhoapi.Expr.prototype.getESetBody = function() {
  return /** @type{?proto.rhoapi.ESet} */ (
    jspb.Message.getWrapperField(this, proto.rhoapi.ESet, 22));
};


/**
 * @param {?proto.rhoapi.ESet|undefined} value
 * @return {!proto.rhoapi.Expr} returns this
*/
proto.rhoapi.Expr.prototype.setESetBody = function(value) {
  return jspb.Message.setOneofWrapperField(this, 22, proto.rhoapi.Expr.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rhoapi.Expr} returns this
 */
proto.rhoapi.Expr.prototype.clearESetBody = function() {
  return this.setESetBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rhoapi.Expr.prototype.hasESetBody = function() {
  return jspb.Message.getField(this, 22) != null;
};


/**
 * optional EMap e_map_body = 23;
 * @return {?proto.rhoapi.EMap}
 */
proto.rhoapi.Expr.prototype.getEMapBody = function() {
  return /** @type{?proto.rhoapi.EMap} */ (
    jspb.Message.getWrapperField(this, proto.rhoapi.EMap, 23));
};


/**
 * @param {?proto.rhoapi.EMap|undefined} value
 * @return {!proto.rhoapi.Expr} returns this
*/
proto.rhoapi.Expr.prototype.setEMapBody = function(value) {
  return jspb.Message.setOneofWrapperField(this, 23, proto.rhoapi.Expr.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rhoapi.Expr} returns this
 */
proto.rhoapi.Expr.prototype.clearEMapBody = function() {
  return this.setEMapBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rhoapi.Expr.prototype.hasEMapBody = function() {
  return jspb.Message.getField(this, 23) != null;
};


/**
 * optional EMethod e_method_body = 24;
 * @return {?proto.rhoapi.EMethod}
 */
proto.rhoapi.Expr.prototype.getEMethodBody = function() {
  return /** @type{?proto.rhoapi.EMethod} */ (
    jspb.Message.getWrapperField(this, proto.rhoapi.EMethod, 24));
};


/**
 * @param {?proto.rhoapi.EMethod|undefined} value
 * @return {!proto.rhoapi.Expr} returns this
*/
proto.rhoapi.Expr.prototype.setEMethodBody = function(value) {
  return jspb.Message.setOneofWrapperField(this, 24, proto.rhoapi.Expr.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rhoapi.Expr} returns this
 */
proto.rhoapi.Expr.prototype.clearEMethodBody = function() {
  return this.setEMethodBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rhoapi.Expr.prototype.hasEMethodBody = function() {
  return jspb.Message.getField(this, 24) != null;
};


/**
 * optional EMatches e_matches_body = 27;
 * @return {?proto.rhoapi.EMatches}
 */
proto.rhoapi.Expr.prototype.getEMatchesBody = function() {
  return /** @type{?proto.rhoapi.EMatches} */ (
    jspb.Message.getWrapperField(this, proto.rhoapi.EMatches, 27));
};


/**
 * @param {?proto.rhoapi.EMatches|undefined} value
 * @return {!proto.rhoapi.Expr} returns this
*/
proto.rhoapi.Expr.prototype.setEMatchesBody = function(value) {
  return jspb.Message.setOneofWrapperField(this, 27, proto.rhoapi.Expr.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rhoapi.Expr} returns this
 */
proto.rhoapi.Expr.prototype.clearEMatchesBody = function() {
  return this.setEMatchesBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rhoapi.Expr.prototype.hasEMatchesBody = function() {
  return jspb.Message.getField(this, 27) != null;
};


/**
 * optional EPercentPercent e_percent_percent_body = 28;
 * @return {?proto.rhoapi.EPercentPercent}
 */
proto.rhoapi.Expr.prototype.getEPercentPercentBody = function() {
  return /** @type{?proto.rhoapi.EPercentPercent} */ (
    jspb.Message.getWrapperField(this, proto.rhoapi.EPercentPercent, 28));
};


/**
 * @param {?proto.rhoapi.EPercentPercent|undefined} value
 * @return {!proto.rhoapi.Expr} returns this
*/
proto.rhoapi.Expr.prototype.setEPercentPercentBody = function(value) {
  return jspb.Message.setOneofWrapperField(this, 28, proto.rhoapi.Expr.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rhoapi.Expr} returns this
 */
proto.rhoapi.Expr.prototype.clearEPercentPercentBody = function() {
  return this.setEPercentPercentBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rhoapi.Expr.prototype.hasEPercentPercentBody = function() {
  return jspb.Message.getField(this, 28) != null;
};


/**
 * optional EPlusPlus e_plus_plus_body = 29;
 * @return {?proto.rhoapi.EPlusPlus}
 */
proto.rhoapi.Expr.prototype.getEPlusPlusBody = function() {
  return /** @type{?proto.rhoapi.EPlusPlus} */ (
    jspb.Message.getWrapperField(this, proto.rhoapi.EPlusPlus, 29));
};


/**
 * @param {?proto.rhoapi.EPlusPlus|undefined} value
 * @return {!proto.rhoapi.Expr} returns this
*/
proto.rhoapi.Expr.prototype.setEPlusPlusBody = function(value) {
  return jspb.Message.setOneofWrapperField(this, 29, proto.rhoapi.Expr.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rhoapi.Expr} returns this
 */
proto.rhoapi.Expr.prototype.clearEPlusPlusBody = function() {
  return this.setEPlusPlusBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rhoapi.Expr.prototype.hasEPlusPlusBody = function() {
  return jspb.Message.getField(this, 29) != null;
};


/**
 * optional EMinusMinus e_minus_minus_body = 30;
 * @return {?proto.rhoapi.EMinusMinus}
 */
proto.rhoapi.Expr.prototype.getEMinusMinusBody = function() {
  return /** @type{?proto.rhoapi.EMinusMinus} */ (
    jspb.Message.getWrapperField(this, proto.rhoapi.EMinusMinus, 30));
};


/**
 * @param {?proto.rhoapi.EMinusMinus|undefined} value
 * @return {!proto.rhoapi.Expr} returns this
*/
proto.rhoapi.Expr.prototype.setEMinusMinusBody = function(value) {
  return jspb.Message.setOneofWrapperField(this, 30, proto.rhoapi.Expr.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rhoapi.Expr} returns this
 */
proto.rhoapi.Expr.prototype.clearEMinusMinusBody = function() {
  return this.setEMinusMinusBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rhoapi.Expr.prototype.hasEMinusMinusBody = function() {
  return jspb.Message.getField(this, 30) != null;
};


/**
 * optional EMod e_mod_body = 31;
 * @return {?proto.rhoapi.EMod}
 */
proto.rhoapi.Expr.prototype.getEModBody = function() {
  return /** @type{?proto.rhoapi.EMod} */ (
    jspb.Message.getWrapperField(this, proto.rhoapi.EMod, 31));
};


/**
 * @param {?proto.rhoapi.EMod|undefined} value
 * @return {!proto.rhoapi.Expr} returns this
*/
proto.rhoapi.Expr.prototype.setEModBody = function(value) {
  return jspb.Message.setOneofWrapperField(this, 31, proto.rhoapi.Expr.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rhoapi.Expr} returns this
 */
proto.rhoapi.Expr.prototype.clearEModBody = function() {
  return this.setEModBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rhoapi.Expr.prototype.hasEModBody = function() {
  return jspb.Message.getField(this, 31) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rhoapi.EList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rhoapi.EList.prototype.toObject = function(opt_includeInstance) {
  return proto.rhoapi.EList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rhoapi.EList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rhoapi.EList.toObject = function(includeInstance, msg) {
  var f, obj = {
    psList: jspb.Message.toObjectList(msg.getPsList(),
    proto.rhoapi.Par.toObject, includeInstance),
    locallyfree: msg.getLocallyfree_asB64(),
    connectiveUsed: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    remainder: (f = msg.getRemainder()) && proto.rhoapi.Var.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rhoapi.EList}
 */
proto.rhoapi.EList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rhoapi.EList;
  return proto.rhoapi.EList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rhoapi.EList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rhoapi.EList}
 */
proto.rhoapi.EList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rhoapi.Par;
      reader.readMessage(value,proto.rhoapi.Par.deserializeBinaryFromReader);
      msg.addPs(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setLocallyfree(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setConnectiveUsed(value);
      break;
    case 5:
      var value = new proto.rhoapi.Var;
      reader.readMessage(value,proto.rhoapi.Var.deserializeBinaryFromReader);
      msg.setRemainder(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rhoapi.EList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rhoapi.EList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rhoapi.EList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rhoapi.EList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.rhoapi.Par.serializeBinaryToWriter
    );
  }
  f = message.getLocallyfree_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getConnectiveUsed();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getRemainder();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.rhoapi.Var.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Par ps = 1;
 * @return {!Array<!proto.rhoapi.Par>}
 */
proto.rhoapi.EList.prototype.getPsList = function() {
  return /** @type{!Array<!proto.rhoapi.Par>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rhoapi.Par, 1));
};


/**
 * @param {!Array<!proto.rhoapi.Par>} value
 * @return {!proto.rhoapi.EList} returns this
*/
proto.rhoapi.EList.prototype.setPsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.rhoapi.Par=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rhoapi.Par}
 */
proto.rhoapi.EList.prototype.addPs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.rhoapi.Par, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rhoapi.EList} returns this
 */
proto.rhoapi.EList.prototype.clearPsList = function() {
  return this.setPsList([]);
};


/**
 * optional bytes locallyFree = 3;
 * @return {!(string|Uint8Array)}
 */
proto.rhoapi.EList.prototype.getLocallyfree = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes locallyFree = 3;
 * This is a type-conversion wrapper around `getLocallyfree()`
 * @return {string}
 */
proto.rhoapi.EList.prototype.getLocallyfree_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getLocallyfree()));
};


/**
 * optional bytes locallyFree = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getLocallyfree()`
 * @return {!Uint8Array}
 */
proto.rhoapi.EList.prototype.getLocallyfree_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getLocallyfree()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.rhoapi.EList} returns this
 */
proto.rhoapi.EList.prototype.setLocallyfree = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bool connective_used = 4;
 * @return {boolean}
 */
proto.rhoapi.EList.prototype.getConnectiveUsed = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rhoapi.EList} returns this
 */
proto.rhoapi.EList.prototype.setConnectiveUsed = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional Var remainder = 5;
 * @return {?proto.rhoapi.Var}
 */
proto.rhoapi.EList.prototype.getRemainder = function() {
  return /** @type{?proto.rhoapi.Var} */ (
    jspb.Message.getWrapperField(this, proto.rhoapi.Var, 5));
};


/**
 * @param {?proto.rhoapi.Var|undefined} value
 * @return {!proto.rhoapi.EList} returns this
*/
proto.rhoapi.EList.prototype.setRemainder = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rhoapi.EList} returns this
 */
proto.rhoapi.EList.prototype.clearRemainder = function() {
  return this.setRemainder(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rhoapi.EList.prototype.hasRemainder = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rhoapi.ETuple.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rhoapi.ETuple.prototype.toObject = function(opt_includeInstance) {
  return proto.rhoapi.ETuple.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rhoapi.ETuple} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rhoapi.ETuple.toObject = function(includeInstance, msg) {
  var f, obj = {
    psList: jspb.Message.toObjectList(msg.getPsList(),
    proto.rhoapi.Par.toObject, includeInstance),
    locallyfree: msg.getLocallyfree_asB64(),
    connectiveUsed: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rhoapi.ETuple}
 */
proto.rhoapi.ETuple.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rhoapi.ETuple;
  return proto.rhoapi.ETuple.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rhoapi.ETuple} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rhoapi.ETuple}
 */
proto.rhoapi.ETuple.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rhoapi.Par;
      reader.readMessage(value,proto.rhoapi.Par.deserializeBinaryFromReader);
      msg.addPs(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setLocallyfree(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setConnectiveUsed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rhoapi.ETuple.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rhoapi.ETuple.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rhoapi.ETuple} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rhoapi.ETuple.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.rhoapi.Par.serializeBinaryToWriter
    );
  }
  f = message.getLocallyfree_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getConnectiveUsed();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * repeated Par ps = 1;
 * @return {!Array<!proto.rhoapi.Par>}
 */
proto.rhoapi.ETuple.prototype.getPsList = function() {
  return /** @type{!Array<!proto.rhoapi.Par>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rhoapi.Par, 1));
};


/**
 * @param {!Array<!proto.rhoapi.Par>} value
 * @return {!proto.rhoapi.ETuple} returns this
*/
proto.rhoapi.ETuple.prototype.setPsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.rhoapi.Par=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rhoapi.Par}
 */
proto.rhoapi.ETuple.prototype.addPs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.rhoapi.Par, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rhoapi.ETuple} returns this
 */
proto.rhoapi.ETuple.prototype.clearPsList = function() {
  return this.setPsList([]);
};


/**
 * optional bytes locallyFree = 3;
 * @return {!(string|Uint8Array)}
 */
proto.rhoapi.ETuple.prototype.getLocallyfree = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes locallyFree = 3;
 * This is a type-conversion wrapper around `getLocallyfree()`
 * @return {string}
 */
proto.rhoapi.ETuple.prototype.getLocallyfree_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getLocallyfree()));
};


/**
 * optional bytes locallyFree = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getLocallyfree()`
 * @return {!Uint8Array}
 */
proto.rhoapi.ETuple.prototype.getLocallyfree_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getLocallyfree()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.rhoapi.ETuple} returns this
 */
proto.rhoapi.ETuple.prototype.setLocallyfree = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bool connective_used = 4;
 * @return {boolean}
 */
proto.rhoapi.ETuple.prototype.getConnectiveUsed = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rhoapi.ETuple} returns this
 */
proto.rhoapi.ETuple.prototype.setConnectiveUsed = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rhoapi.ESet.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rhoapi.ESet.prototype.toObject = function(opt_includeInstance) {
  return proto.rhoapi.ESet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rhoapi.ESet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rhoapi.ESet.toObject = function(includeInstance, msg) {
  var f, obj = {
    psList: jspb.Message.toObjectList(msg.getPsList(),
    proto.rhoapi.Par.toObject, includeInstance),
    locallyfree: msg.getLocallyfree_asB64(),
    connectiveUsed: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    remainder: (f = msg.getRemainder()) && proto.rhoapi.Var.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rhoapi.ESet}
 */
proto.rhoapi.ESet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rhoapi.ESet;
  return proto.rhoapi.ESet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rhoapi.ESet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rhoapi.ESet}
 */
proto.rhoapi.ESet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rhoapi.Par;
      reader.readMessage(value,proto.rhoapi.Par.deserializeBinaryFromReader);
      msg.addPs(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setLocallyfree(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setConnectiveUsed(value);
      break;
    case 5:
      var value = new proto.rhoapi.Var;
      reader.readMessage(value,proto.rhoapi.Var.deserializeBinaryFromReader);
      msg.setRemainder(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rhoapi.ESet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rhoapi.ESet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rhoapi.ESet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rhoapi.ESet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.rhoapi.Par.serializeBinaryToWriter
    );
  }
  f = message.getLocallyfree_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getConnectiveUsed();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getRemainder();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.rhoapi.Var.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Par ps = 1;
 * @return {!Array<!proto.rhoapi.Par>}
 */
proto.rhoapi.ESet.prototype.getPsList = function() {
  return /** @type{!Array<!proto.rhoapi.Par>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rhoapi.Par, 1));
};


/**
 * @param {!Array<!proto.rhoapi.Par>} value
 * @return {!proto.rhoapi.ESet} returns this
*/
proto.rhoapi.ESet.prototype.setPsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.rhoapi.Par=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rhoapi.Par}
 */
proto.rhoapi.ESet.prototype.addPs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.rhoapi.Par, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rhoapi.ESet} returns this
 */
proto.rhoapi.ESet.prototype.clearPsList = function() {
  return this.setPsList([]);
};


/**
 * optional bytes locallyFree = 3;
 * @return {!(string|Uint8Array)}
 */
proto.rhoapi.ESet.prototype.getLocallyfree = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes locallyFree = 3;
 * This is a type-conversion wrapper around `getLocallyfree()`
 * @return {string}
 */
proto.rhoapi.ESet.prototype.getLocallyfree_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getLocallyfree()));
};


/**
 * optional bytes locallyFree = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getLocallyfree()`
 * @return {!Uint8Array}
 */
proto.rhoapi.ESet.prototype.getLocallyfree_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getLocallyfree()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.rhoapi.ESet} returns this
 */
proto.rhoapi.ESet.prototype.setLocallyfree = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bool connective_used = 4;
 * @return {boolean}
 */
proto.rhoapi.ESet.prototype.getConnectiveUsed = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rhoapi.ESet} returns this
 */
proto.rhoapi.ESet.prototype.setConnectiveUsed = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional Var remainder = 5;
 * @return {?proto.rhoapi.Var}
 */
proto.rhoapi.ESet.prototype.getRemainder = function() {
  return /** @type{?proto.rhoapi.Var} */ (
    jspb.Message.getWrapperField(this, proto.rhoapi.Var, 5));
};


/**
 * @param {?proto.rhoapi.Var|undefined} value
 * @return {!proto.rhoapi.ESet} returns this
*/
proto.rhoapi.ESet.prototype.setRemainder = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rhoapi.ESet} returns this
 */
proto.rhoapi.ESet.prototype.clearRemainder = function() {
  return this.setRemainder(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rhoapi.ESet.prototype.hasRemainder = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rhoapi.EMap.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rhoapi.EMap.prototype.toObject = function(opt_includeInstance) {
  return proto.rhoapi.EMap.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rhoapi.EMap} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rhoapi.EMap.toObject = function(includeInstance, msg) {
  var f, obj = {
    kvsList: jspb.Message.toObjectList(msg.getKvsList(),
    proto.rhoapi.KeyValuePair.toObject, includeInstance),
    locallyfree: msg.getLocallyfree_asB64(),
    connectiveUsed: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    remainder: (f = msg.getRemainder()) && proto.rhoapi.Var.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rhoapi.EMap}
 */
proto.rhoapi.EMap.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rhoapi.EMap;
  return proto.rhoapi.EMap.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rhoapi.EMap} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rhoapi.EMap}
 */
proto.rhoapi.EMap.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rhoapi.KeyValuePair;
      reader.readMessage(value,proto.rhoapi.KeyValuePair.deserializeBinaryFromReader);
      msg.addKvs(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setLocallyfree(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setConnectiveUsed(value);
      break;
    case 5:
      var value = new proto.rhoapi.Var;
      reader.readMessage(value,proto.rhoapi.Var.deserializeBinaryFromReader);
      msg.setRemainder(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rhoapi.EMap.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rhoapi.EMap.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rhoapi.EMap} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rhoapi.EMap.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKvsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.rhoapi.KeyValuePair.serializeBinaryToWriter
    );
  }
  f = message.getLocallyfree_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getConnectiveUsed();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getRemainder();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.rhoapi.Var.serializeBinaryToWriter
    );
  }
};


/**
 * repeated KeyValuePair kvs = 1;
 * @return {!Array<!proto.rhoapi.KeyValuePair>}
 */
proto.rhoapi.EMap.prototype.getKvsList = function() {
  return /** @type{!Array<!proto.rhoapi.KeyValuePair>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rhoapi.KeyValuePair, 1));
};


/**
 * @param {!Array<!proto.rhoapi.KeyValuePair>} value
 * @return {!proto.rhoapi.EMap} returns this
*/
proto.rhoapi.EMap.prototype.setKvsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.rhoapi.KeyValuePair=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rhoapi.KeyValuePair}
 */
proto.rhoapi.EMap.prototype.addKvs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.rhoapi.KeyValuePair, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rhoapi.EMap} returns this
 */
proto.rhoapi.EMap.prototype.clearKvsList = function() {
  return this.setKvsList([]);
};


/**
 * optional bytes locallyFree = 3;
 * @return {!(string|Uint8Array)}
 */
proto.rhoapi.EMap.prototype.getLocallyfree = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes locallyFree = 3;
 * This is a type-conversion wrapper around `getLocallyfree()`
 * @return {string}
 */
proto.rhoapi.EMap.prototype.getLocallyfree_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getLocallyfree()));
};


/**
 * optional bytes locallyFree = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getLocallyfree()`
 * @return {!Uint8Array}
 */
proto.rhoapi.EMap.prototype.getLocallyfree_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getLocallyfree()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.rhoapi.EMap} returns this
 */
proto.rhoapi.EMap.prototype.setLocallyfree = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bool connective_used = 4;
 * @return {boolean}
 */
proto.rhoapi.EMap.prototype.getConnectiveUsed = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rhoapi.EMap} returns this
 */
proto.rhoapi.EMap.prototype.setConnectiveUsed = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional Var remainder = 5;
 * @return {?proto.rhoapi.Var}
 */
proto.rhoapi.EMap.prototype.getRemainder = function() {
  return /** @type{?proto.rhoapi.Var} */ (
    jspb.Message.getWrapperField(this, proto.rhoapi.Var, 5));
};


/**
 * @param {?proto.rhoapi.Var|undefined} value
 * @return {!proto.rhoapi.EMap} returns this
*/
proto.rhoapi.EMap.prototype.setRemainder = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rhoapi.EMap} returns this
 */
proto.rhoapi.EMap.prototype.clearRemainder = function() {
  return this.setRemainder(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rhoapi.EMap.prototype.hasRemainder = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rhoapi.EMethod.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rhoapi.EMethod.prototype.toObject = function(opt_includeInstance) {
  return proto.rhoapi.EMethod.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rhoapi.EMethod} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rhoapi.EMethod.toObject = function(includeInstance, msg) {
  var f, obj = {
    methodname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    target: (f = msg.getTarget()) && proto.rhoapi.Par.toObject(includeInstance, f),
    argumentsList: jspb.Message.toObjectList(msg.getArgumentsList(),
    proto.rhoapi.Par.toObject, includeInstance),
    locallyfree: msg.getLocallyfree_asB64(),
    connectiveUsed: jspb.Message.getBooleanFieldWithDefault(msg, 6, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rhoapi.EMethod}
 */
proto.rhoapi.EMethod.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rhoapi.EMethod;
  return proto.rhoapi.EMethod.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rhoapi.EMethod} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rhoapi.EMethod}
 */
proto.rhoapi.EMethod.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMethodname(value);
      break;
    case 2:
      var value = new proto.rhoapi.Par;
      reader.readMessage(value,proto.rhoapi.Par.deserializeBinaryFromReader);
      msg.setTarget(value);
      break;
    case 3:
      var value = new proto.rhoapi.Par;
      reader.readMessage(value,proto.rhoapi.Par.deserializeBinaryFromReader);
      msg.addArguments(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setLocallyfree(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setConnectiveUsed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rhoapi.EMethod.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rhoapi.EMethod.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rhoapi.EMethod} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rhoapi.EMethod.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMethodname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTarget();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rhoapi.Par.serializeBinaryToWriter
    );
  }
  f = message.getArgumentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.rhoapi.Par.serializeBinaryToWriter
    );
  }
  f = message.getLocallyfree_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getConnectiveUsed();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
};


/**
 * optional string methodName = 1;
 * @return {string}
 */
proto.rhoapi.EMethod.prototype.getMethodname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.rhoapi.EMethod} returns this
 */
proto.rhoapi.EMethod.prototype.setMethodname = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Par target = 2;
 * @return {?proto.rhoapi.Par}
 */
proto.rhoapi.EMethod.prototype.getTarget = function() {
  return /** @type{?proto.rhoapi.Par} */ (
    jspb.Message.getWrapperField(this, proto.rhoapi.Par, 2));
};


/**
 * @param {?proto.rhoapi.Par|undefined} value
 * @return {!proto.rhoapi.EMethod} returns this
*/
proto.rhoapi.EMethod.prototype.setTarget = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rhoapi.EMethod} returns this
 */
proto.rhoapi.EMethod.prototype.clearTarget = function() {
  return this.setTarget(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rhoapi.EMethod.prototype.hasTarget = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated Par arguments = 3;
 * @return {!Array<!proto.rhoapi.Par>}
 */
proto.rhoapi.EMethod.prototype.getArgumentsList = function() {
  return /** @type{!Array<!proto.rhoapi.Par>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rhoapi.Par, 3));
};


/**
 * @param {!Array<!proto.rhoapi.Par>} value
 * @return {!proto.rhoapi.EMethod} returns this
*/
proto.rhoapi.EMethod.prototype.setArgumentsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.rhoapi.Par=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rhoapi.Par}
 */
proto.rhoapi.EMethod.prototype.addArguments = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.rhoapi.Par, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rhoapi.EMethod} returns this
 */
proto.rhoapi.EMethod.prototype.clearArgumentsList = function() {
  return this.setArgumentsList([]);
};


/**
 * optional bytes locallyFree = 5;
 * @return {!(string|Uint8Array)}
 */
proto.rhoapi.EMethod.prototype.getLocallyfree = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes locallyFree = 5;
 * This is a type-conversion wrapper around `getLocallyfree()`
 * @return {string}
 */
proto.rhoapi.EMethod.prototype.getLocallyfree_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getLocallyfree()));
};


/**
 * optional bytes locallyFree = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getLocallyfree()`
 * @return {!Uint8Array}
 */
proto.rhoapi.EMethod.prototype.getLocallyfree_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getLocallyfree()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.rhoapi.EMethod} returns this
 */
proto.rhoapi.EMethod.prototype.setLocallyfree = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional bool connective_used = 6;
 * @return {boolean}
 */
proto.rhoapi.EMethod.prototype.getConnectiveUsed = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rhoapi.EMethod} returns this
 */
proto.rhoapi.EMethod.prototype.setConnectiveUsed = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rhoapi.KeyValuePair.prototype.toObject = function(opt_includeInstance) {
  return proto.rhoapi.KeyValuePair.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rhoapi.KeyValuePair} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rhoapi.KeyValuePair.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: (f = msg.getKey()) && proto.rhoapi.Par.toObject(includeInstance, f),
    value: (f = msg.getValue()) && proto.rhoapi.Par.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rhoapi.KeyValuePair}
 */
proto.rhoapi.KeyValuePair.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rhoapi.KeyValuePair;
  return proto.rhoapi.KeyValuePair.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rhoapi.KeyValuePair} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rhoapi.KeyValuePair}
 */
proto.rhoapi.KeyValuePair.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rhoapi.Par;
      reader.readMessage(value,proto.rhoapi.Par.deserializeBinaryFromReader);
      msg.setKey(value);
      break;
    case 2:
      var value = new proto.rhoapi.Par;
      reader.readMessage(value,proto.rhoapi.Par.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rhoapi.KeyValuePair.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rhoapi.KeyValuePair.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rhoapi.KeyValuePair} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rhoapi.KeyValuePair.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rhoapi.Par.serializeBinaryToWriter
    );
  }
  f = message.getValue();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rhoapi.Par.serializeBinaryToWriter
    );
  }
};


/**
 * optional Par key = 1;
 * @return {?proto.rhoapi.Par}
 */
proto.rhoapi.KeyValuePair.prototype.getKey = function() {
  return /** @type{?proto.rhoapi.Par} */ (
    jspb.Message.getWrapperField(this, proto.rhoapi.Par, 1));
};


/**
 * @param {?proto.rhoapi.Par|undefined} value
 * @return {!proto.rhoapi.KeyValuePair} returns this
*/
proto.rhoapi.KeyValuePair.prototype.setKey = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rhoapi.KeyValuePair} returns this
 */
proto.rhoapi.KeyValuePair.prototype.clearKey = function() {
  return this.setKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rhoapi.KeyValuePair.prototype.hasKey = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Par value = 2;
 * @return {?proto.rhoapi.Par}
 */
proto.rhoapi.KeyValuePair.prototype.getValue = function() {
  return /** @type{?proto.rhoapi.Par} */ (
    jspb.Message.getWrapperField(this, proto.rhoapi.Par, 2));
};


/**
 * @param {?proto.rhoapi.Par|undefined} value
 * @return {!proto.rhoapi.KeyValuePair} returns this
*/
proto.rhoapi.KeyValuePair.prototype.setValue = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rhoapi.KeyValuePair} returns this
 */
proto.rhoapi.KeyValuePair.prototype.clearValue = function() {
  return this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rhoapi.KeyValuePair.prototype.hasValue = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rhoapi.EVar.prototype.toObject = function(opt_includeInstance) {
  return proto.rhoapi.EVar.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rhoapi.EVar} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rhoapi.EVar.toObject = function(includeInstance, msg) {
  var f, obj = {
    v: (f = msg.getV()) && proto.rhoapi.Var.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rhoapi.EVar}
 */
proto.rhoapi.EVar.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rhoapi.EVar;
  return proto.rhoapi.EVar.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rhoapi.EVar} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rhoapi.EVar}
 */
proto.rhoapi.EVar.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rhoapi.Var;
      reader.readMessage(value,proto.rhoapi.Var.deserializeBinaryFromReader);
      msg.setV(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rhoapi.EVar.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rhoapi.EVar.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rhoapi.EVar} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rhoapi.EVar.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getV();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rhoapi.Var.serializeBinaryToWriter
    );
  }
};


/**
 * optional Var v = 1;
 * @return {?proto.rhoapi.Var}
 */
proto.rhoapi.EVar.prototype.getV = function() {
  return /** @type{?proto.rhoapi.Var} */ (
    jspb.Message.getWrapperField(this, proto.rhoapi.Var, 1));
};


/**
 * @param {?proto.rhoapi.Var|undefined} value
 * @return {!proto.rhoapi.EVar} returns this
*/
proto.rhoapi.EVar.prototype.setV = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rhoapi.EVar} returns this
 */
proto.rhoapi.EVar.prototype.clearV = function() {
  return this.setV(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rhoapi.EVar.prototype.hasV = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rhoapi.ENot.prototype.toObject = function(opt_includeInstance) {
  return proto.rhoapi.ENot.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rhoapi.ENot} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rhoapi.ENot.toObject = function(includeInstance, msg) {
  var f, obj = {
    p: (f = msg.getP()) && proto.rhoapi.Par.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rhoapi.ENot}
 */
proto.rhoapi.ENot.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rhoapi.ENot;
  return proto.rhoapi.ENot.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rhoapi.ENot} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rhoapi.ENot}
 */
proto.rhoapi.ENot.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rhoapi.Par;
      reader.readMessage(value,proto.rhoapi.Par.deserializeBinaryFromReader);
      msg.setP(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rhoapi.ENot.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rhoapi.ENot.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rhoapi.ENot} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rhoapi.ENot.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getP();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rhoapi.Par.serializeBinaryToWriter
    );
  }
};


/**
 * optional Par p = 1;
 * @return {?proto.rhoapi.Par}
 */
proto.rhoapi.ENot.prototype.getP = function() {
  return /** @type{?proto.rhoapi.Par} */ (
    jspb.Message.getWrapperField(this, proto.rhoapi.Par, 1));
};


/**
 * @param {?proto.rhoapi.Par|undefined} value
 * @return {!proto.rhoapi.ENot} returns this
*/
proto.rhoapi.ENot.prototype.setP = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rhoapi.ENot} returns this
 */
proto.rhoapi.ENot.prototype.clearP = function() {
  return this.setP(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rhoapi.ENot.prototype.hasP = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rhoapi.ENeg.prototype.toObject = function(opt_includeInstance) {
  return proto.rhoapi.ENeg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rhoapi.ENeg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rhoapi.ENeg.toObject = function(includeInstance, msg) {
  var f, obj = {
    p: (f = msg.getP()) && proto.rhoapi.Par.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rhoapi.ENeg}
 */
proto.rhoapi.ENeg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rhoapi.ENeg;
  return proto.rhoapi.ENeg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rhoapi.ENeg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rhoapi.ENeg}
 */
proto.rhoapi.ENeg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rhoapi.Par;
      reader.readMessage(value,proto.rhoapi.Par.deserializeBinaryFromReader);
      msg.setP(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rhoapi.ENeg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rhoapi.ENeg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rhoapi.ENeg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rhoapi.ENeg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getP();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rhoapi.Par.serializeBinaryToWriter
    );
  }
};


/**
 * optional Par p = 1;
 * @return {?proto.rhoapi.Par}
 */
proto.rhoapi.ENeg.prototype.getP = function() {
  return /** @type{?proto.rhoapi.Par} */ (
    jspb.Message.getWrapperField(this, proto.rhoapi.Par, 1));
};


/**
 * @param {?proto.rhoapi.Par|undefined} value
 * @return {!proto.rhoapi.ENeg} returns this
*/
proto.rhoapi.ENeg.prototype.setP = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rhoapi.ENeg} returns this
 */
proto.rhoapi.ENeg.prototype.clearP = function() {
  return this.setP(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rhoapi.ENeg.prototype.hasP = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rhoapi.EMult.prototype.toObject = function(opt_includeInstance) {
  return proto.rhoapi.EMult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rhoapi.EMult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rhoapi.EMult.toObject = function(includeInstance, msg) {
  var f, obj = {
    p1: (f = msg.getP1()) && proto.rhoapi.Par.toObject(includeInstance, f),
    p2: (f = msg.getP2()) && proto.rhoapi.Par.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rhoapi.EMult}
 */
proto.rhoapi.EMult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rhoapi.EMult;
  return proto.rhoapi.EMult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rhoapi.EMult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rhoapi.EMult}
 */
proto.rhoapi.EMult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rhoapi.Par;
      reader.readMessage(value,proto.rhoapi.Par.deserializeBinaryFromReader);
      msg.setP1(value);
      break;
    case 2:
      var value = new proto.rhoapi.Par;
      reader.readMessage(value,proto.rhoapi.Par.deserializeBinaryFromReader);
      msg.setP2(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rhoapi.EMult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rhoapi.EMult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rhoapi.EMult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rhoapi.EMult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getP1();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rhoapi.Par.serializeBinaryToWriter
    );
  }
  f = message.getP2();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rhoapi.Par.serializeBinaryToWriter
    );
  }
};


/**
 * optional Par p1 = 1;
 * @return {?proto.rhoapi.Par}
 */
proto.rhoapi.EMult.prototype.getP1 = function() {
  return /** @type{?proto.rhoapi.Par} */ (
    jspb.Message.getWrapperField(this, proto.rhoapi.Par, 1));
};


/**
 * @param {?proto.rhoapi.Par|undefined} value
 * @return {!proto.rhoapi.EMult} returns this
*/
proto.rhoapi.EMult.prototype.setP1 = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rhoapi.EMult} returns this
 */
proto.rhoapi.EMult.prototype.clearP1 = function() {
  return this.setP1(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rhoapi.EMult.prototype.hasP1 = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Par p2 = 2;
 * @return {?proto.rhoapi.Par}
 */
proto.rhoapi.EMult.prototype.getP2 = function() {
  return /** @type{?proto.rhoapi.Par} */ (
    jspb.Message.getWrapperField(this, proto.rhoapi.Par, 2));
};


/**
 * @param {?proto.rhoapi.Par|undefined} value
 * @return {!proto.rhoapi.EMult} returns this
*/
proto.rhoapi.EMult.prototype.setP2 = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rhoapi.EMult} returns this
 */
proto.rhoapi.EMult.prototype.clearP2 = function() {
  return this.setP2(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rhoapi.EMult.prototype.hasP2 = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rhoapi.EDiv.prototype.toObject = function(opt_includeInstance) {
  return proto.rhoapi.EDiv.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rhoapi.EDiv} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rhoapi.EDiv.toObject = function(includeInstance, msg) {
  var f, obj = {
    p1: (f = msg.getP1()) && proto.rhoapi.Par.toObject(includeInstance, f),
    p2: (f = msg.getP2()) && proto.rhoapi.Par.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rhoapi.EDiv}
 */
proto.rhoapi.EDiv.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rhoapi.EDiv;
  return proto.rhoapi.EDiv.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rhoapi.EDiv} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rhoapi.EDiv}
 */
proto.rhoapi.EDiv.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rhoapi.Par;
      reader.readMessage(value,proto.rhoapi.Par.deserializeBinaryFromReader);
      msg.setP1(value);
      break;
    case 2:
      var value = new proto.rhoapi.Par;
      reader.readMessage(value,proto.rhoapi.Par.deserializeBinaryFromReader);
      msg.setP2(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rhoapi.EDiv.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rhoapi.EDiv.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rhoapi.EDiv} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rhoapi.EDiv.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getP1();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rhoapi.Par.serializeBinaryToWriter
    );
  }
  f = message.getP2();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rhoapi.Par.serializeBinaryToWriter
    );
  }
};


/**
 * optional Par p1 = 1;
 * @return {?proto.rhoapi.Par}
 */
proto.rhoapi.EDiv.prototype.getP1 = function() {
  return /** @type{?proto.rhoapi.Par} */ (
    jspb.Message.getWrapperField(this, proto.rhoapi.Par, 1));
};


/**
 * @param {?proto.rhoapi.Par|undefined} value
 * @return {!proto.rhoapi.EDiv} returns this
*/
proto.rhoapi.EDiv.prototype.setP1 = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rhoapi.EDiv} returns this
 */
proto.rhoapi.EDiv.prototype.clearP1 = function() {
  return this.setP1(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rhoapi.EDiv.prototype.hasP1 = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Par p2 = 2;
 * @return {?proto.rhoapi.Par}
 */
proto.rhoapi.EDiv.prototype.getP2 = function() {
  return /** @type{?proto.rhoapi.Par} */ (
    jspb.Message.getWrapperField(this, proto.rhoapi.Par, 2));
};


/**
 * @param {?proto.rhoapi.Par|undefined} value
 * @return {!proto.rhoapi.EDiv} returns this
*/
proto.rhoapi.EDiv.prototype.setP2 = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rhoapi.EDiv} returns this
 */
proto.rhoapi.EDiv.prototype.clearP2 = function() {
  return this.setP2(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rhoapi.EDiv.prototype.hasP2 = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rhoapi.EMod.prototype.toObject = function(opt_includeInstance) {
  return proto.rhoapi.EMod.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rhoapi.EMod} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rhoapi.EMod.toObject = function(includeInstance, msg) {
  var f, obj = {
    p1: (f = msg.getP1()) && proto.rhoapi.Par.toObject(includeInstance, f),
    p2: (f = msg.getP2()) && proto.rhoapi.Par.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rhoapi.EMod}
 */
proto.rhoapi.EMod.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rhoapi.EMod;
  return proto.rhoapi.EMod.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rhoapi.EMod} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rhoapi.EMod}
 */
proto.rhoapi.EMod.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rhoapi.Par;
      reader.readMessage(value,proto.rhoapi.Par.deserializeBinaryFromReader);
      msg.setP1(value);
      break;
    case 2:
      var value = new proto.rhoapi.Par;
      reader.readMessage(value,proto.rhoapi.Par.deserializeBinaryFromReader);
      msg.setP2(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rhoapi.EMod.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rhoapi.EMod.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rhoapi.EMod} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rhoapi.EMod.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getP1();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rhoapi.Par.serializeBinaryToWriter
    );
  }
  f = message.getP2();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rhoapi.Par.serializeBinaryToWriter
    );
  }
};


/**
 * optional Par p1 = 1;
 * @return {?proto.rhoapi.Par}
 */
proto.rhoapi.EMod.prototype.getP1 = function() {
  return /** @type{?proto.rhoapi.Par} */ (
    jspb.Message.getWrapperField(this, proto.rhoapi.Par, 1));
};


/**
 * @param {?proto.rhoapi.Par|undefined} value
 * @return {!proto.rhoapi.EMod} returns this
*/
proto.rhoapi.EMod.prototype.setP1 = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rhoapi.EMod} returns this
 */
proto.rhoapi.EMod.prototype.clearP1 = function() {
  return this.setP1(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rhoapi.EMod.prototype.hasP1 = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Par p2 = 2;
 * @return {?proto.rhoapi.Par}
 */
proto.rhoapi.EMod.prototype.getP2 = function() {
  return /** @type{?proto.rhoapi.Par} */ (
    jspb.Message.getWrapperField(this, proto.rhoapi.Par, 2));
};


/**
 * @param {?proto.rhoapi.Par|undefined} value
 * @return {!proto.rhoapi.EMod} returns this
*/
proto.rhoapi.EMod.prototype.setP2 = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rhoapi.EMod} returns this
 */
proto.rhoapi.EMod.prototype.clearP2 = function() {
  return this.setP2(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rhoapi.EMod.prototype.hasP2 = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rhoapi.EPlus.prototype.toObject = function(opt_includeInstance) {
  return proto.rhoapi.EPlus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rhoapi.EPlus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rhoapi.EPlus.toObject = function(includeInstance, msg) {
  var f, obj = {
    p1: (f = msg.getP1()) && proto.rhoapi.Par.toObject(includeInstance, f),
    p2: (f = msg.getP2()) && proto.rhoapi.Par.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rhoapi.EPlus}
 */
proto.rhoapi.EPlus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rhoapi.EPlus;
  return proto.rhoapi.EPlus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rhoapi.EPlus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rhoapi.EPlus}
 */
proto.rhoapi.EPlus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rhoapi.Par;
      reader.readMessage(value,proto.rhoapi.Par.deserializeBinaryFromReader);
      msg.setP1(value);
      break;
    case 2:
      var value = new proto.rhoapi.Par;
      reader.readMessage(value,proto.rhoapi.Par.deserializeBinaryFromReader);
      msg.setP2(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rhoapi.EPlus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rhoapi.EPlus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rhoapi.EPlus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rhoapi.EPlus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getP1();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rhoapi.Par.serializeBinaryToWriter
    );
  }
  f = message.getP2();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rhoapi.Par.serializeBinaryToWriter
    );
  }
};


/**
 * optional Par p1 = 1;
 * @return {?proto.rhoapi.Par}
 */
proto.rhoapi.EPlus.prototype.getP1 = function() {
  return /** @type{?proto.rhoapi.Par} */ (
    jspb.Message.getWrapperField(this, proto.rhoapi.Par, 1));
};


/**
 * @param {?proto.rhoapi.Par|undefined} value
 * @return {!proto.rhoapi.EPlus} returns this
*/
proto.rhoapi.EPlus.prototype.setP1 = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rhoapi.EPlus} returns this
 */
proto.rhoapi.EPlus.prototype.clearP1 = function() {
  return this.setP1(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rhoapi.EPlus.prototype.hasP1 = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Par p2 = 2;
 * @return {?proto.rhoapi.Par}
 */
proto.rhoapi.EPlus.prototype.getP2 = function() {
  return /** @type{?proto.rhoapi.Par} */ (
    jspb.Message.getWrapperField(this, proto.rhoapi.Par, 2));
};


/**
 * @param {?proto.rhoapi.Par|undefined} value
 * @return {!proto.rhoapi.EPlus} returns this
*/
proto.rhoapi.EPlus.prototype.setP2 = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rhoapi.EPlus} returns this
 */
proto.rhoapi.EPlus.prototype.clearP2 = function() {
  return this.setP2(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rhoapi.EPlus.prototype.hasP2 = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rhoapi.EMinus.prototype.toObject = function(opt_includeInstance) {
  return proto.rhoapi.EMinus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rhoapi.EMinus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rhoapi.EMinus.toObject = function(includeInstance, msg) {
  var f, obj = {
    p1: (f = msg.getP1()) && proto.rhoapi.Par.toObject(includeInstance, f),
    p2: (f = msg.getP2()) && proto.rhoapi.Par.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rhoapi.EMinus}
 */
proto.rhoapi.EMinus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rhoapi.EMinus;
  return proto.rhoapi.EMinus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rhoapi.EMinus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rhoapi.EMinus}
 */
proto.rhoapi.EMinus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rhoapi.Par;
      reader.readMessage(value,proto.rhoapi.Par.deserializeBinaryFromReader);
      msg.setP1(value);
      break;
    case 2:
      var value = new proto.rhoapi.Par;
      reader.readMessage(value,proto.rhoapi.Par.deserializeBinaryFromReader);
      msg.setP2(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rhoapi.EMinus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rhoapi.EMinus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rhoapi.EMinus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rhoapi.EMinus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getP1();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rhoapi.Par.serializeBinaryToWriter
    );
  }
  f = message.getP2();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rhoapi.Par.serializeBinaryToWriter
    );
  }
};


/**
 * optional Par p1 = 1;
 * @return {?proto.rhoapi.Par}
 */
proto.rhoapi.EMinus.prototype.getP1 = function() {
  return /** @type{?proto.rhoapi.Par} */ (
    jspb.Message.getWrapperField(this, proto.rhoapi.Par, 1));
};


/**
 * @param {?proto.rhoapi.Par|undefined} value
 * @return {!proto.rhoapi.EMinus} returns this
*/
proto.rhoapi.EMinus.prototype.setP1 = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rhoapi.EMinus} returns this
 */
proto.rhoapi.EMinus.prototype.clearP1 = function() {
  return this.setP1(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rhoapi.EMinus.prototype.hasP1 = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Par p2 = 2;
 * @return {?proto.rhoapi.Par}
 */
proto.rhoapi.EMinus.prototype.getP2 = function() {
  return /** @type{?proto.rhoapi.Par} */ (
    jspb.Message.getWrapperField(this, proto.rhoapi.Par, 2));
};


/**
 * @param {?proto.rhoapi.Par|undefined} value
 * @return {!proto.rhoapi.EMinus} returns this
*/
proto.rhoapi.EMinus.prototype.setP2 = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rhoapi.EMinus} returns this
 */
proto.rhoapi.EMinus.prototype.clearP2 = function() {
  return this.setP2(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rhoapi.EMinus.prototype.hasP2 = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rhoapi.ELt.prototype.toObject = function(opt_includeInstance) {
  return proto.rhoapi.ELt.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rhoapi.ELt} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rhoapi.ELt.toObject = function(includeInstance, msg) {
  var f, obj = {
    p1: (f = msg.getP1()) && proto.rhoapi.Par.toObject(includeInstance, f),
    p2: (f = msg.getP2()) && proto.rhoapi.Par.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rhoapi.ELt}
 */
proto.rhoapi.ELt.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rhoapi.ELt;
  return proto.rhoapi.ELt.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rhoapi.ELt} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rhoapi.ELt}
 */
proto.rhoapi.ELt.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rhoapi.Par;
      reader.readMessage(value,proto.rhoapi.Par.deserializeBinaryFromReader);
      msg.setP1(value);
      break;
    case 2:
      var value = new proto.rhoapi.Par;
      reader.readMessage(value,proto.rhoapi.Par.deserializeBinaryFromReader);
      msg.setP2(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rhoapi.ELt.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rhoapi.ELt.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rhoapi.ELt} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rhoapi.ELt.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getP1();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rhoapi.Par.serializeBinaryToWriter
    );
  }
  f = message.getP2();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rhoapi.Par.serializeBinaryToWriter
    );
  }
};


/**
 * optional Par p1 = 1;
 * @return {?proto.rhoapi.Par}
 */
proto.rhoapi.ELt.prototype.getP1 = function() {
  return /** @type{?proto.rhoapi.Par} */ (
    jspb.Message.getWrapperField(this, proto.rhoapi.Par, 1));
};


/**
 * @param {?proto.rhoapi.Par|undefined} value
 * @return {!proto.rhoapi.ELt} returns this
*/
proto.rhoapi.ELt.prototype.setP1 = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rhoapi.ELt} returns this
 */
proto.rhoapi.ELt.prototype.clearP1 = function() {
  return this.setP1(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rhoapi.ELt.prototype.hasP1 = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Par p2 = 2;
 * @return {?proto.rhoapi.Par}
 */
proto.rhoapi.ELt.prototype.getP2 = function() {
  return /** @type{?proto.rhoapi.Par} */ (
    jspb.Message.getWrapperField(this, proto.rhoapi.Par, 2));
};


/**
 * @param {?proto.rhoapi.Par|undefined} value
 * @return {!proto.rhoapi.ELt} returns this
*/
proto.rhoapi.ELt.prototype.setP2 = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rhoapi.ELt} returns this
 */
proto.rhoapi.ELt.prototype.clearP2 = function() {
  return this.setP2(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rhoapi.ELt.prototype.hasP2 = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rhoapi.ELte.prototype.toObject = function(opt_includeInstance) {
  return proto.rhoapi.ELte.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rhoapi.ELte} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rhoapi.ELte.toObject = function(includeInstance, msg) {
  var f, obj = {
    p1: (f = msg.getP1()) && proto.rhoapi.Par.toObject(includeInstance, f),
    p2: (f = msg.getP2()) && proto.rhoapi.Par.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rhoapi.ELte}
 */
proto.rhoapi.ELte.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rhoapi.ELte;
  return proto.rhoapi.ELte.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rhoapi.ELte} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rhoapi.ELte}
 */
proto.rhoapi.ELte.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rhoapi.Par;
      reader.readMessage(value,proto.rhoapi.Par.deserializeBinaryFromReader);
      msg.setP1(value);
      break;
    case 2:
      var value = new proto.rhoapi.Par;
      reader.readMessage(value,proto.rhoapi.Par.deserializeBinaryFromReader);
      msg.setP2(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rhoapi.ELte.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rhoapi.ELte.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rhoapi.ELte} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rhoapi.ELte.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getP1();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rhoapi.Par.serializeBinaryToWriter
    );
  }
  f = message.getP2();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rhoapi.Par.serializeBinaryToWriter
    );
  }
};


/**
 * optional Par p1 = 1;
 * @return {?proto.rhoapi.Par}
 */
proto.rhoapi.ELte.prototype.getP1 = function() {
  return /** @type{?proto.rhoapi.Par} */ (
    jspb.Message.getWrapperField(this, proto.rhoapi.Par, 1));
};


/**
 * @param {?proto.rhoapi.Par|undefined} value
 * @return {!proto.rhoapi.ELte} returns this
*/
proto.rhoapi.ELte.prototype.setP1 = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rhoapi.ELte} returns this
 */
proto.rhoapi.ELte.prototype.clearP1 = function() {
  return this.setP1(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rhoapi.ELte.prototype.hasP1 = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Par p2 = 2;
 * @return {?proto.rhoapi.Par}
 */
proto.rhoapi.ELte.prototype.getP2 = function() {
  return /** @type{?proto.rhoapi.Par} */ (
    jspb.Message.getWrapperField(this, proto.rhoapi.Par, 2));
};


/**
 * @param {?proto.rhoapi.Par|undefined} value
 * @return {!proto.rhoapi.ELte} returns this
*/
proto.rhoapi.ELte.prototype.setP2 = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rhoapi.ELte} returns this
 */
proto.rhoapi.ELte.prototype.clearP2 = function() {
  return this.setP2(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rhoapi.ELte.prototype.hasP2 = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rhoapi.EGt.prototype.toObject = function(opt_includeInstance) {
  return proto.rhoapi.EGt.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rhoapi.EGt} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rhoapi.EGt.toObject = function(includeInstance, msg) {
  var f, obj = {
    p1: (f = msg.getP1()) && proto.rhoapi.Par.toObject(includeInstance, f),
    p2: (f = msg.getP2()) && proto.rhoapi.Par.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rhoapi.EGt}
 */
proto.rhoapi.EGt.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rhoapi.EGt;
  return proto.rhoapi.EGt.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rhoapi.EGt} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rhoapi.EGt}
 */
proto.rhoapi.EGt.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rhoapi.Par;
      reader.readMessage(value,proto.rhoapi.Par.deserializeBinaryFromReader);
      msg.setP1(value);
      break;
    case 2:
      var value = new proto.rhoapi.Par;
      reader.readMessage(value,proto.rhoapi.Par.deserializeBinaryFromReader);
      msg.setP2(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rhoapi.EGt.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rhoapi.EGt.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rhoapi.EGt} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rhoapi.EGt.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getP1();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rhoapi.Par.serializeBinaryToWriter
    );
  }
  f = message.getP2();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rhoapi.Par.serializeBinaryToWriter
    );
  }
};


/**
 * optional Par p1 = 1;
 * @return {?proto.rhoapi.Par}
 */
proto.rhoapi.EGt.prototype.getP1 = function() {
  return /** @type{?proto.rhoapi.Par} */ (
    jspb.Message.getWrapperField(this, proto.rhoapi.Par, 1));
};


/**
 * @param {?proto.rhoapi.Par|undefined} value
 * @return {!proto.rhoapi.EGt} returns this
*/
proto.rhoapi.EGt.prototype.setP1 = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rhoapi.EGt} returns this
 */
proto.rhoapi.EGt.prototype.clearP1 = function() {
  return this.setP1(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rhoapi.EGt.prototype.hasP1 = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Par p2 = 2;
 * @return {?proto.rhoapi.Par}
 */
proto.rhoapi.EGt.prototype.getP2 = function() {
  return /** @type{?proto.rhoapi.Par} */ (
    jspb.Message.getWrapperField(this, proto.rhoapi.Par, 2));
};


/**
 * @param {?proto.rhoapi.Par|undefined} value
 * @return {!proto.rhoapi.EGt} returns this
*/
proto.rhoapi.EGt.prototype.setP2 = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rhoapi.EGt} returns this
 */
proto.rhoapi.EGt.prototype.clearP2 = function() {
  return this.setP2(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rhoapi.EGt.prototype.hasP2 = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rhoapi.EGte.prototype.toObject = function(opt_includeInstance) {
  return proto.rhoapi.EGte.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rhoapi.EGte} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rhoapi.EGte.toObject = function(includeInstance, msg) {
  var f, obj = {
    p1: (f = msg.getP1()) && proto.rhoapi.Par.toObject(includeInstance, f),
    p2: (f = msg.getP2()) && proto.rhoapi.Par.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rhoapi.EGte}
 */
proto.rhoapi.EGte.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rhoapi.EGte;
  return proto.rhoapi.EGte.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rhoapi.EGte} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rhoapi.EGte}
 */
proto.rhoapi.EGte.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rhoapi.Par;
      reader.readMessage(value,proto.rhoapi.Par.deserializeBinaryFromReader);
      msg.setP1(value);
      break;
    case 2:
      var value = new proto.rhoapi.Par;
      reader.readMessage(value,proto.rhoapi.Par.deserializeBinaryFromReader);
      msg.setP2(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rhoapi.EGte.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rhoapi.EGte.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rhoapi.EGte} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rhoapi.EGte.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getP1();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rhoapi.Par.serializeBinaryToWriter
    );
  }
  f = message.getP2();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rhoapi.Par.serializeBinaryToWriter
    );
  }
};


/**
 * optional Par p1 = 1;
 * @return {?proto.rhoapi.Par}
 */
proto.rhoapi.EGte.prototype.getP1 = function() {
  return /** @type{?proto.rhoapi.Par} */ (
    jspb.Message.getWrapperField(this, proto.rhoapi.Par, 1));
};


/**
 * @param {?proto.rhoapi.Par|undefined} value
 * @return {!proto.rhoapi.EGte} returns this
*/
proto.rhoapi.EGte.prototype.setP1 = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rhoapi.EGte} returns this
 */
proto.rhoapi.EGte.prototype.clearP1 = function() {
  return this.setP1(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rhoapi.EGte.prototype.hasP1 = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Par p2 = 2;
 * @return {?proto.rhoapi.Par}
 */
proto.rhoapi.EGte.prototype.getP2 = function() {
  return /** @type{?proto.rhoapi.Par} */ (
    jspb.Message.getWrapperField(this, proto.rhoapi.Par, 2));
};


/**
 * @param {?proto.rhoapi.Par|undefined} value
 * @return {!proto.rhoapi.EGte} returns this
*/
proto.rhoapi.EGte.prototype.setP2 = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rhoapi.EGte} returns this
 */
proto.rhoapi.EGte.prototype.clearP2 = function() {
  return this.setP2(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rhoapi.EGte.prototype.hasP2 = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rhoapi.EEq.prototype.toObject = function(opt_includeInstance) {
  return proto.rhoapi.EEq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rhoapi.EEq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rhoapi.EEq.toObject = function(includeInstance, msg) {
  var f, obj = {
    p1: (f = msg.getP1()) && proto.rhoapi.Par.toObject(includeInstance, f),
    p2: (f = msg.getP2()) && proto.rhoapi.Par.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rhoapi.EEq}
 */
proto.rhoapi.EEq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rhoapi.EEq;
  return proto.rhoapi.EEq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rhoapi.EEq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rhoapi.EEq}
 */
proto.rhoapi.EEq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rhoapi.Par;
      reader.readMessage(value,proto.rhoapi.Par.deserializeBinaryFromReader);
      msg.setP1(value);
      break;
    case 2:
      var value = new proto.rhoapi.Par;
      reader.readMessage(value,proto.rhoapi.Par.deserializeBinaryFromReader);
      msg.setP2(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rhoapi.EEq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rhoapi.EEq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rhoapi.EEq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rhoapi.EEq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getP1();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rhoapi.Par.serializeBinaryToWriter
    );
  }
  f = message.getP2();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rhoapi.Par.serializeBinaryToWriter
    );
  }
};


/**
 * optional Par p1 = 1;
 * @return {?proto.rhoapi.Par}
 */
proto.rhoapi.EEq.prototype.getP1 = function() {
  return /** @type{?proto.rhoapi.Par} */ (
    jspb.Message.getWrapperField(this, proto.rhoapi.Par, 1));
};


/**
 * @param {?proto.rhoapi.Par|undefined} value
 * @return {!proto.rhoapi.EEq} returns this
*/
proto.rhoapi.EEq.prototype.setP1 = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rhoapi.EEq} returns this
 */
proto.rhoapi.EEq.prototype.clearP1 = function() {
  return this.setP1(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rhoapi.EEq.prototype.hasP1 = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Par p2 = 2;
 * @return {?proto.rhoapi.Par}
 */
proto.rhoapi.EEq.prototype.getP2 = function() {
  return /** @type{?proto.rhoapi.Par} */ (
    jspb.Message.getWrapperField(this, proto.rhoapi.Par, 2));
};


/**
 * @param {?proto.rhoapi.Par|undefined} value
 * @return {!proto.rhoapi.EEq} returns this
*/
proto.rhoapi.EEq.prototype.setP2 = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rhoapi.EEq} returns this
 */
proto.rhoapi.EEq.prototype.clearP2 = function() {
  return this.setP2(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rhoapi.EEq.prototype.hasP2 = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rhoapi.ENeq.prototype.toObject = function(opt_includeInstance) {
  return proto.rhoapi.ENeq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rhoapi.ENeq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rhoapi.ENeq.toObject = function(includeInstance, msg) {
  var f, obj = {
    p1: (f = msg.getP1()) && proto.rhoapi.Par.toObject(includeInstance, f),
    p2: (f = msg.getP2()) && proto.rhoapi.Par.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rhoapi.ENeq}
 */
proto.rhoapi.ENeq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rhoapi.ENeq;
  return proto.rhoapi.ENeq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rhoapi.ENeq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rhoapi.ENeq}
 */
proto.rhoapi.ENeq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rhoapi.Par;
      reader.readMessage(value,proto.rhoapi.Par.deserializeBinaryFromReader);
      msg.setP1(value);
      break;
    case 2:
      var value = new proto.rhoapi.Par;
      reader.readMessage(value,proto.rhoapi.Par.deserializeBinaryFromReader);
      msg.setP2(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rhoapi.ENeq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rhoapi.ENeq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rhoapi.ENeq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rhoapi.ENeq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getP1();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rhoapi.Par.serializeBinaryToWriter
    );
  }
  f = message.getP2();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rhoapi.Par.serializeBinaryToWriter
    );
  }
};


/**
 * optional Par p1 = 1;
 * @return {?proto.rhoapi.Par}
 */
proto.rhoapi.ENeq.prototype.getP1 = function() {
  return /** @type{?proto.rhoapi.Par} */ (
    jspb.Message.getWrapperField(this, proto.rhoapi.Par, 1));
};


/**
 * @param {?proto.rhoapi.Par|undefined} value
 * @return {!proto.rhoapi.ENeq} returns this
*/
proto.rhoapi.ENeq.prototype.setP1 = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rhoapi.ENeq} returns this
 */
proto.rhoapi.ENeq.prototype.clearP1 = function() {
  return this.setP1(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rhoapi.ENeq.prototype.hasP1 = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Par p2 = 2;
 * @return {?proto.rhoapi.Par}
 */
proto.rhoapi.ENeq.prototype.getP2 = function() {
  return /** @type{?proto.rhoapi.Par} */ (
    jspb.Message.getWrapperField(this, proto.rhoapi.Par, 2));
};


/**
 * @param {?proto.rhoapi.Par|undefined} value
 * @return {!proto.rhoapi.ENeq} returns this
*/
proto.rhoapi.ENeq.prototype.setP2 = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rhoapi.ENeq} returns this
 */
proto.rhoapi.ENeq.prototype.clearP2 = function() {
  return this.setP2(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rhoapi.ENeq.prototype.hasP2 = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rhoapi.EAnd.prototype.toObject = function(opt_includeInstance) {
  return proto.rhoapi.EAnd.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rhoapi.EAnd} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rhoapi.EAnd.toObject = function(includeInstance, msg) {
  var f, obj = {
    p1: (f = msg.getP1()) && proto.rhoapi.Par.toObject(includeInstance, f),
    p2: (f = msg.getP2()) && proto.rhoapi.Par.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rhoapi.EAnd}
 */
proto.rhoapi.EAnd.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rhoapi.EAnd;
  return proto.rhoapi.EAnd.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rhoapi.EAnd} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rhoapi.EAnd}
 */
proto.rhoapi.EAnd.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rhoapi.Par;
      reader.readMessage(value,proto.rhoapi.Par.deserializeBinaryFromReader);
      msg.setP1(value);
      break;
    case 2:
      var value = new proto.rhoapi.Par;
      reader.readMessage(value,proto.rhoapi.Par.deserializeBinaryFromReader);
      msg.setP2(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rhoapi.EAnd.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rhoapi.EAnd.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rhoapi.EAnd} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rhoapi.EAnd.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getP1();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rhoapi.Par.serializeBinaryToWriter
    );
  }
  f = message.getP2();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rhoapi.Par.serializeBinaryToWriter
    );
  }
};


/**
 * optional Par p1 = 1;
 * @return {?proto.rhoapi.Par}
 */
proto.rhoapi.EAnd.prototype.getP1 = function() {
  return /** @type{?proto.rhoapi.Par} */ (
    jspb.Message.getWrapperField(this, proto.rhoapi.Par, 1));
};


/**
 * @param {?proto.rhoapi.Par|undefined} value
 * @return {!proto.rhoapi.EAnd} returns this
*/
proto.rhoapi.EAnd.prototype.setP1 = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rhoapi.EAnd} returns this
 */
proto.rhoapi.EAnd.prototype.clearP1 = function() {
  return this.setP1(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rhoapi.EAnd.prototype.hasP1 = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Par p2 = 2;
 * @return {?proto.rhoapi.Par}
 */
proto.rhoapi.EAnd.prototype.getP2 = function() {
  return /** @type{?proto.rhoapi.Par} */ (
    jspb.Message.getWrapperField(this, proto.rhoapi.Par, 2));
};


/**
 * @param {?proto.rhoapi.Par|undefined} value
 * @return {!proto.rhoapi.EAnd} returns this
*/
proto.rhoapi.EAnd.prototype.setP2 = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rhoapi.EAnd} returns this
 */
proto.rhoapi.EAnd.prototype.clearP2 = function() {
  return this.setP2(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rhoapi.EAnd.prototype.hasP2 = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rhoapi.EOr.prototype.toObject = function(opt_includeInstance) {
  return proto.rhoapi.EOr.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rhoapi.EOr} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rhoapi.EOr.toObject = function(includeInstance, msg) {
  var f, obj = {
    p1: (f = msg.getP1()) && proto.rhoapi.Par.toObject(includeInstance, f),
    p2: (f = msg.getP2()) && proto.rhoapi.Par.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rhoapi.EOr}
 */
proto.rhoapi.EOr.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rhoapi.EOr;
  return proto.rhoapi.EOr.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rhoapi.EOr} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rhoapi.EOr}
 */
proto.rhoapi.EOr.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rhoapi.Par;
      reader.readMessage(value,proto.rhoapi.Par.deserializeBinaryFromReader);
      msg.setP1(value);
      break;
    case 2:
      var value = new proto.rhoapi.Par;
      reader.readMessage(value,proto.rhoapi.Par.deserializeBinaryFromReader);
      msg.setP2(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rhoapi.EOr.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rhoapi.EOr.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rhoapi.EOr} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rhoapi.EOr.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getP1();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rhoapi.Par.serializeBinaryToWriter
    );
  }
  f = message.getP2();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rhoapi.Par.serializeBinaryToWriter
    );
  }
};


/**
 * optional Par p1 = 1;
 * @return {?proto.rhoapi.Par}
 */
proto.rhoapi.EOr.prototype.getP1 = function() {
  return /** @type{?proto.rhoapi.Par} */ (
    jspb.Message.getWrapperField(this, proto.rhoapi.Par, 1));
};


/**
 * @param {?proto.rhoapi.Par|undefined} value
 * @return {!proto.rhoapi.EOr} returns this
*/
proto.rhoapi.EOr.prototype.setP1 = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rhoapi.EOr} returns this
 */
proto.rhoapi.EOr.prototype.clearP1 = function() {
  return this.setP1(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rhoapi.EOr.prototype.hasP1 = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Par p2 = 2;
 * @return {?proto.rhoapi.Par}
 */
proto.rhoapi.EOr.prototype.getP2 = function() {
  return /** @type{?proto.rhoapi.Par} */ (
    jspb.Message.getWrapperField(this, proto.rhoapi.Par, 2));
};


/**
 * @param {?proto.rhoapi.Par|undefined} value
 * @return {!proto.rhoapi.EOr} returns this
*/
proto.rhoapi.EOr.prototype.setP2 = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rhoapi.EOr} returns this
 */
proto.rhoapi.EOr.prototype.clearP2 = function() {
  return this.setP2(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rhoapi.EOr.prototype.hasP2 = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rhoapi.EMatches.prototype.toObject = function(opt_includeInstance) {
  return proto.rhoapi.EMatches.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rhoapi.EMatches} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rhoapi.EMatches.toObject = function(includeInstance, msg) {
  var f, obj = {
    target: (f = msg.getTarget()) && proto.rhoapi.Par.toObject(includeInstance, f),
    pattern: (f = msg.getPattern()) && proto.rhoapi.Par.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rhoapi.EMatches}
 */
proto.rhoapi.EMatches.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rhoapi.EMatches;
  return proto.rhoapi.EMatches.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rhoapi.EMatches} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rhoapi.EMatches}
 */
proto.rhoapi.EMatches.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rhoapi.Par;
      reader.readMessage(value,proto.rhoapi.Par.deserializeBinaryFromReader);
      msg.setTarget(value);
      break;
    case 2:
      var value = new proto.rhoapi.Par;
      reader.readMessage(value,proto.rhoapi.Par.deserializeBinaryFromReader);
      msg.setPattern(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rhoapi.EMatches.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rhoapi.EMatches.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rhoapi.EMatches} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rhoapi.EMatches.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTarget();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rhoapi.Par.serializeBinaryToWriter
    );
  }
  f = message.getPattern();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rhoapi.Par.serializeBinaryToWriter
    );
  }
};


/**
 * optional Par target = 1;
 * @return {?proto.rhoapi.Par}
 */
proto.rhoapi.EMatches.prototype.getTarget = function() {
  return /** @type{?proto.rhoapi.Par} */ (
    jspb.Message.getWrapperField(this, proto.rhoapi.Par, 1));
};


/**
 * @param {?proto.rhoapi.Par|undefined} value
 * @return {!proto.rhoapi.EMatches} returns this
*/
proto.rhoapi.EMatches.prototype.setTarget = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rhoapi.EMatches} returns this
 */
proto.rhoapi.EMatches.prototype.clearTarget = function() {
  return this.setTarget(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rhoapi.EMatches.prototype.hasTarget = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Par pattern = 2;
 * @return {?proto.rhoapi.Par}
 */
proto.rhoapi.EMatches.prototype.getPattern = function() {
  return /** @type{?proto.rhoapi.Par} */ (
    jspb.Message.getWrapperField(this, proto.rhoapi.Par, 2));
};


/**
 * @param {?proto.rhoapi.Par|undefined} value
 * @return {!proto.rhoapi.EMatches} returns this
*/
proto.rhoapi.EMatches.prototype.setPattern = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rhoapi.EMatches} returns this
 */
proto.rhoapi.EMatches.prototype.clearPattern = function() {
  return this.setPattern(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rhoapi.EMatches.prototype.hasPattern = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rhoapi.EPercentPercent.prototype.toObject = function(opt_includeInstance) {
  return proto.rhoapi.EPercentPercent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rhoapi.EPercentPercent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rhoapi.EPercentPercent.toObject = function(includeInstance, msg) {
  var f, obj = {
    p1: (f = msg.getP1()) && proto.rhoapi.Par.toObject(includeInstance, f),
    p2: (f = msg.getP2()) && proto.rhoapi.Par.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rhoapi.EPercentPercent}
 */
proto.rhoapi.EPercentPercent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rhoapi.EPercentPercent;
  return proto.rhoapi.EPercentPercent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rhoapi.EPercentPercent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rhoapi.EPercentPercent}
 */
proto.rhoapi.EPercentPercent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rhoapi.Par;
      reader.readMessage(value,proto.rhoapi.Par.deserializeBinaryFromReader);
      msg.setP1(value);
      break;
    case 2:
      var value = new proto.rhoapi.Par;
      reader.readMessage(value,proto.rhoapi.Par.deserializeBinaryFromReader);
      msg.setP2(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rhoapi.EPercentPercent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rhoapi.EPercentPercent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rhoapi.EPercentPercent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rhoapi.EPercentPercent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getP1();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rhoapi.Par.serializeBinaryToWriter
    );
  }
  f = message.getP2();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rhoapi.Par.serializeBinaryToWriter
    );
  }
};


/**
 * optional Par p1 = 1;
 * @return {?proto.rhoapi.Par}
 */
proto.rhoapi.EPercentPercent.prototype.getP1 = function() {
  return /** @type{?proto.rhoapi.Par} */ (
    jspb.Message.getWrapperField(this, proto.rhoapi.Par, 1));
};


/**
 * @param {?proto.rhoapi.Par|undefined} value
 * @return {!proto.rhoapi.EPercentPercent} returns this
*/
proto.rhoapi.EPercentPercent.prototype.setP1 = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rhoapi.EPercentPercent} returns this
 */
proto.rhoapi.EPercentPercent.prototype.clearP1 = function() {
  return this.setP1(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rhoapi.EPercentPercent.prototype.hasP1 = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Par p2 = 2;
 * @return {?proto.rhoapi.Par}
 */
proto.rhoapi.EPercentPercent.prototype.getP2 = function() {
  return /** @type{?proto.rhoapi.Par} */ (
    jspb.Message.getWrapperField(this, proto.rhoapi.Par, 2));
};


/**
 * @param {?proto.rhoapi.Par|undefined} value
 * @return {!proto.rhoapi.EPercentPercent} returns this
*/
proto.rhoapi.EPercentPercent.prototype.setP2 = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rhoapi.EPercentPercent} returns this
 */
proto.rhoapi.EPercentPercent.prototype.clearP2 = function() {
  return this.setP2(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rhoapi.EPercentPercent.prototype.hasP2 = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rhoapi.EPlusPlus.prototype.toObject = function(opt_includeInstance) {
  return proto.rhoapi.EPlusPlus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rhoapi.EPlusPlus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rhoapi.EPlusPlus.toObject = function(includeInstance, msg) {
  var f, obj = {
    p1: (f = msg.getP1()) && proto.rhoapi.Par.toObject(includeInstance, f),
    p2: (f = msg.getP2()) && proto.rhoapi.Par.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rhoapi.EPlusPlus}
 */
proto.rhoapi.EPlusPlus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rhoapi.EPlusPlus;
  return proto.rhoapi.EPlusPlus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rhoapi.EPlusPlus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rhoapi.EPlusPlus}
 */
proto.rhoapi.EPlusPlus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rhoapi.Par;
      reader.readMessage(value,proto.rhoapi.Par.deserializeBinaryFromReader);
      msg.setP1(value);
      break;
    case 2:
      var value = new proto.rhoapi.Par;
      reader.readMessage(value,proto.rhoapi.Par.deserializeBinaryFromReader);
      msg.setP2(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rhoapi.EPlusPlus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rhoapi.EPlusPlus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rhoapi.EPlusPlus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rhoapi.EPlusPlus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getP1();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rhoapi.Par.serializeBinaryToWriter
    );
  }
  f = message.getP2();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rhoapi.Par.serializeBinaryToWriter
    );
  }
};


/**
 * optional Par p1 = 1;
 * @return {?proto.rhoapi.Par}
 */
proto.rhoapi.EPlusPlus.prototype.getP1 = function() {
  return /** @type{?proto.rhoapi.Par} */ (
    jspb.Message.getWrapperField(this, proto.rhoapi.Par, 1));
};


/**
 * @param {?proto.rhoapi.Par|undefined} value
 * @return {!proto.rhoapi.EPlusPlus} returns this
*/
proto.rhoapi.EPlusPlus.prototype.setP1 = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rhoapi.EPlusPlus} returns this
 */
proto.rhoapi.EPlusPlus.prototype.clearP1 = function() {
  return this.setP1(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rhoapi.EPlusPlus.prototype.hasP1 = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Par p2 = 2;
 * @return {?proto.rhoapi.Par}
 */
proto.rhoapi.EPlusPlus.prototype.getP2 = function() {
  return /** @type{?proto.rhoapi.Par} */ (
    jspb.Message.getWrapperField(this, proto.rhoapi.Par, 2));
};


/**
 * @param {?proto.rhoapi.Par|undefined} value
 * @return {!proto.rhoapi.EPlusPlus} returns this
*/
proto.rhoapi.EPlusPlus.prototype.setP2 = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rhoapi.EPlusPlus} returns this
 */
proto.rhoapi.EPlusPlus.prototype.clearP2 = function() {
  return this.setP2(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rhoapi.EPlusPlus.prototype.hasP2 = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rhoapi.EMinusMinus.prototype.toObject = function(opt_includeInstance) {
  return proto.rhoapi.EMinusMinus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rhoapi.EMinusMinus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rhoapi.EMinusMinus.toObject = function(includeInstance, msg) {
  var f, obj = {
    p1: (f = msg.getP1()) && proto.rhoapi.Par.toObject(includeInstance, f),
    p2: (f = msg.getP2()) && proto.rhoapi.Par.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rhoapi.EMinusMinus}
 */
proto.rhoapi.EMinusMinus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rhoapi.EMinusMinus;
  return proto.rhoapi.EMinusMinus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rhoapi.EMinusMinus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rhoapi.EMinusMinus}
 */
proto.rhoapi.EMinusMinus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rhoapi.Par;
      reader.readMessage(value,proto.rhoapi.Par.deserializeBinaryFromReader);
      msg.setP1(value);
      break;
    case 2:
      var value = new proto.rhoapi.Par;
      reader.readMessage(value,proto.rhoapi.Par.deserializeBinaryFromReader);
      msg.setP2(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rhoapi.EMinusMinus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rhoapi.EMinusMinus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rhoapi.EMinusMinus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rhoapi.EMinusMinus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getP1();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rhoapi.Par.serializeBinaryToWriter
    );
  }
  f = message.getP2();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rhoapi.Par.serializeBinaryToWriter
    );
  }
};


/**
 * optional Par p1 = 1;
 * @return {?proto.rhoapi.Par}
 */
proto.rhoapi.EMinusMinus.prototype.getP1 = function() {
  return /** @type{?proto.rhoapi.Par} */ (
    jspb.Message.getWrapperField(this, proto.rhoapi.Par, 1));
};


/**
 * @param {?proto.rhoapi.Par|undefined} value
 * @return {!proto.rhoapi.EMinusMinus} returns this
*/
proto.rhoapi.EMinusMinus.prototype.setP1 = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rhoapi.EMinusMinus} returns this
 */
proto.rhoapi.EMinusMinus.prototype.clearP1 = function() {
  return this.setP1(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rhoapi.EMinusMinus.prototype.hasP1 = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Par p2 = 2;
 * @return {?proto.rhoapi.Par}
 */
proto.rhoapi.EMinusMinus.prototype.getP2 = function() {
  return /** @type{?proto.rhoapi.Par} */ (
    jspb.Message.getWrapperField(this, proto.rhoapi.Par, 2));
};


/**
 * @param {?proto.rhoapi.Par|undefined} value
 * @return {!proto.rhoapi.EMinusMinus} returns this
*/
proto.rhoapi.EMinusMinus.prototype.setP2 = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rhoapi.EMinusMinus} returns this
 */
proto.rhoapi.EMinusMinus.prototype.clearP2 = function() {
  return this.setP2(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rhoapi.EMinusMinus.prototype.hasP2 = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.rhoapi.Connective.oneofGroups_ = [[1,2,3,4,5,6,7,8,9]];

/**
 * @enum {number}
 */
proto.rhoapi.Connective.ConnectiveInstanceCase = {
  CONNECTIVE_INSTANCE_NOT_SET: 0,
  CONN_AND_BODY: 1,
  CONN_OR_BODY: 2,
  CONN_NOT_BODY: 3,
  VAR_REF_BODY: 4,
  CONN_BOOL: 5,
  CONN_INT: 6,
  CONN_STRING: 7,
  CONN_URI: 8,
  CONN_BYTE_ARRAY: 9
};

/**
 * @return {proto.rhoapi.Connective.ConnectiveInstanceCase}
 */
proto.rhoapi.Connective.prototype.getConnectiveInstanceCase = function() {
  return /** @type {proto.rhoapi.Connective.ConnectiveInstanceCase} */(jspb.Message.computeOneofCase(this, proto.rhoapi.Connective.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rhoapi.Connective.prototype.toObject = function(opt_includeInstance) {
  return proto.rhoapi.Connective.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rhoapi.Connective} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rhoapi.Connective.toObject = function(includeInstance, msg) {
  var f, obj = {
    connAndBody: (f = msg.getConnAndBody()) && proto.rhoapi.ConnectiveBody.toObject(includeInstance, f),
    connOrBody: (f = msg.getConnOrBody()) && proto.rhoapi.ConnectiveBody.toObject(includeInstance, f),
    connNotBody: (f = msg.getConnNotBody()) && proto.rhoapi.Par.toObject(includeInstance, f),
    varRefBody: (f = msg.getVarRefBody()) && proto.rhoapi.VarRef.toObject(includeInstance, f),
    connBool: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    connInt: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    connString: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
    connUri: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
    connByteArray: jspb.Message.getBooleanFieldWithDefault(msg, 9, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rhoapi.Connective}
 */
proto.rhoapi.Connective.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rhoapi.Connective;
  return proto.rhoapi.Connective.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rhoapi.Connective} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rhoapi.Connective}
 */
proto.rhoapi.Connective.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rhoapi.ConnectiveBody;
      reader.readMessage(value,proto.rhoapi.ConnectiveBody.deserializeBinaryFromReader);
      msg.setConnAndBody(value);
      break;
    case 2:
      var value = new proto.rhoapi.ConnectiveBody;
      reader.readMessage(value,proto.rhoapi.ConnectiveBody.deserializeBinaryFromReader);
      msg.setConnOrBody(value);
      break;
    case 3:
      var value = new proto.rhoapi.Par;
      reader.readMessage(value,proto.rhoapi.Par.deserializeBinaryFromReader);
      msg.setConnNotBody(value);
      break;
    case 4:
      var value = new proto.rhoapi.VarRef;
      reader.readMessage(value,proto.rhoapi.VarRef.deserializeBinaryFromReader);
      msg.setVarRefBody(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setConnBool(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setConnInt(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setConnString(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setConnUri(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setConnByteArray(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rhoapi.Connective.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rhoapi.Connective.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rhoapi.Connective} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rhoapi.Connective.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConnAndBody();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rhoapi.ConnectiveBody.serializeBinaryToWriter
    );
  }
  f = message.getConnOrBody();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rhoapi.ConnectiveBody.serializeBinaryToWriter
    );
  }
  f = message.getConnNotBody();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.rhoapi.Par.serializeBinaryToWriter
    );
  }
  f = message.getVarRefBody();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.rhoapi.VarRef.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBool(
      5,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeBool(
      6,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeBool(
      7,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeBool(
      8,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeBool(
      9,
      f
    );
  }
};


/**
 * optional ConnectiveBody conn_and_body = 1;
 * @return {?proto.rhoapi.ConnectiveBody}
 */
proto.rhoapi.Connective.prototype.getConnAndBody = function() {
  return /** @type{?proto.rhoapi.ConnectiveBody} */ (
    jspb.Message.getWrapperField(this, proto.rhoapi.ConnectiveBody, 1));
};


/**
 * @param {?proto.rhoapi.ConnectiveBody|undefined} value
 * @return {!proto.rhoapi.Connective} returns this
*/
proto.rhoapi.Connective.prototype.setConnAndBody = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.rhoapi.Connective.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rhoapi.Connective} returns this
 */
proto.rhoapi.Connective.prototype.clearConnAndBody = function() {
  return this.setConnAndBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rhoapi.Connective.prototype.hasConnAndBody = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ConnectiveBody conn_or_body = 2;
 * @return {?proto.rhoapi.ConnectiveBody}
 */
proto.rhoapi.Connective.prototype.getConnOrBody = function() {
  return /** @type{?proto.rhoapi.ConnectiveBody} */ (
    jspb.Message.getWrapperField(this, proto.rhoapi.ConnectiveBody, 2));
};


/**
 * @param {?proto.rhoapi.ConnectiveBody|undefined} value
 * @return {!proto.rhoapi.Connective} returns this
*/
proto.rhoapi.Connective.prototype.setConnOrBody = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.rhoapi.Connective.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rhoapi.Connective} returns this
 */
proto.rhoapi.Connective.prototype.clearConnOrBody = function() {
  return this.setConnOrBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rhoapi.Connective.prototype.hasConnOrBody = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Par conn_not_body = 3;
 * @return {?proto.rhoapi.Par}
 */
proto.rhoapi.Connective.prototype.getConnNotBody = function() {
  return /** @type{?proto.rhoapi.Par} */ (
    jspb.Message.getWrapperField(this, proto.rhoapi.Par, 3));
};


/**
 * @param {?proto.rhoapi.Par|undefined} value
 * @return {!proto.rhoapi.Connective} returns this
*/
proto.rhoapi.Connective.prototype.setConnNotBody = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.rhoapi.Connective.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rhoapi.Connective} returns this
 */
proto.rhoapi.Connective.prototype.clearConnNotBody = function() {
  return this.setConnNotBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rhoapi.Connective.prototype.hasConnNotBody = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional VarRef var_ref_body = 4;
 * @return {?proto.rhoapi.VarRef}
 */
proto.rhoapi.Connective.prototype.getVarRefBody = function() {
  return /** @type{?proto.rhoapi.VarRef} */ (
    jspb.Message.getWrapperField(this, proto.rhoapi.VarRef, 4));
};


/**
 * @param {?proto.rhoapi.VarRef|undefined} value
 * @return {!proto.rhoapi.Connective} returns this
*/
proto.rhoapi.Connective.prototype.setVarRefBody = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.rhoapi.Connective.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rhoapi.Connective} returns this
 */
proto.rhoapi.Connective.prototype.clearVarRefBody = function() {
  return this.setVarRefBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rhoapi.Connective.prototype.hasVarRefBody = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bool conn_bool = 5;
 * @return {boolean}
 */
proto.rhoapi.Connective.prototype.getConnBool = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rhoapi.Connective} returns this
 */
proto.rhoapi.Connective.prototype.setConnBool = function(value) {
  return jspb.Message.setOneofField(this, 5, proto.rhoapi.Connective.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.rhoapi.Connective} returns this
 */
proto.rhoapi.Connective.prototype.clearConnBool = function() {
  return jspb.Message.setOneofField(this, 5, proto.rhoapi.Connective.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rhoapi.Connective.prototype.hasConnBool = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bool conn_int = 6;
 * @return {boolean}
 */
proto.rhoapi.Connective.prototype.getConnInt = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rhoapi.Connective} returns this
 */
proto.rhoapi.Connective.prototype.setConnInt = function(value) {
  return jspb.Message.setOneofField(this, 6, proto.rhoapi.Connective.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.rhoapi.Connective} returns this
 */
proto.rhoapi.Connective.prototype.clearConnInt = function() {
  return jspb.Message.setOneofField(this, 6, proto.rhoapi.Connective.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rhoapi.Connective.prototype.hasConnInt = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional bool conn_string = 7;
 * @return {boolean}
 */
proto.rhoapi.Connective.prototype.getConnString = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rhoapi.Connective} returns this
 */
proto.rhoapi.Connective.prototype.setConnString = function(value) {
  return jspb.Message.setOneofField(this, 7, proto.rhoapi.Connective.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.rhoapi.Connective} returns this
 */
proto.rhoapi.Connective.prototype.clearConnString = function() {
  return jspb.Message.setOneofField(this, 7, proto.rhoapi.Connective.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rhoapi.Connective.prototype.hasConnString = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional bool conn_uri = 8;
 * @return {boolean}
 */
proto.rhoapi.Connective.prototype.getConnUri = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rhoapi.Connective} returns this
 */
proto.rhoapi.Connective.prototype.setConnUri = function(value) {
  return jspb.Message.setOneofField(this, 8, proto.rhoapi.Connective.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.rhoapi.Connective} returns this
 */
proto.rhoapi.Connective.prototype.clearConnUri = function() {
  return jspb.Message.setOneofField(this, 8, proto.rhoapi.Connective.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rhoapi.Connective.prototype.hasConnUri = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional bool conn_byte_array = 9;
 * @return {boolean}
 */
proto.rhoapi.Connective.prototype.getConnByteArray = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rhoapi.Connective} returns this
 */
proto.rhoapi.Connective.prototype.setConnByteArray = function(value) {
  return jspb.Message.setOneofField(this, 9, proto.rhoapi.Connective.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.rhoapi.Connective} returns this
 */
proto.rhoapi.Connective.prototype.clearConnByteArray = function() {
  return jspb.Message.setOneofField(this, 9, proto.rhoapi.Connective.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rhoapi.Connective.prototype.hasConnByteArray = function() {
  return jspb.Message.getField(this, 9) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rhoapi.VarRef.prototype.toObject = function(opt_includeInstance) {
  return proto.rhoapi.VarRef.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rhoapi.VarRef} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rhoapi.VarRef.toObject = function(includeInstance, msg) {
  var f, obj = {
    index: jspb.Message.getFieldWithDefault(msg, 1, 0),
    depth: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rhoapi.VarRef}
 */
proto.rhoapi.VarRef.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rhoapi.VarRef;
  return proto.rhoapi.VarRef.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rhoapi.VarRef} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rhoapi.VarRef}
 */
proto.rhoapi.VarRef.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setIndex(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setDepth(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rhoapi.VarRef.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rhoapi.VarRef.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rhoapi.VarRef} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rhoapi.VarRef.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIndex();
  if (f !== 0) {
    writer.writeSint32(
      1,
      f
    );
  }
  f = message.getDepth();
  if (f !== 0) {
    writer.writeSint32(
      2,
      f
    );
  }
};


/**
 * optional sint32 index = 1;
 * @return {number}
 */
proto.rhoapi.VarRef.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.rhoapi.VarRef} returns this
 */
proto.rhoapi.VarRef.prototype.setIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional sint32 depth = 2;
 * @return {number}
 */
proto.rhoapi.VarRef.prototype.getDepth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.rhoapi.VarRef} returns this
 */
proto.rhoapi.VarRef.prototype.setDepth = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rhoapi.ConnectiveBody.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rhoapi.ConnectiveBody.prototype.toObject = function(opt_includeInstance) {
  return proto.rhoapi.ConnectiveBody.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rhoapi.ConnectiveBody} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rhoapi.ConnectiveBody.toObject = function(includeInstance, msg) {
  var f, obj = {
    psList: jspb.Message.toObjectList(msg.getPsList(),
    proto.rhoapi.Par.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rhoapi.ConnectiveBody}
 */
proto.rhoapi.ConnectiveBody.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rhoapi.ConnectiveBody;
  return proto.rhoapi.ConnectiveBody.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rhoapi.ConnectiveBody} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rhoapi.ConnectiveBody}
 */
proto.rhoapi.ConnectiveBody.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rhoapi.Par;
      reader.readMessage(value,proto.rhoapi.Par.deserializeBinaryFromReader);
      msg.addPs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rhoapi.ConnectiveBody.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rhoapi.ConnectiveBody.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rhoapi.ConnectiveBody} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rhoapi.ConnectiveBody.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.rhoapi.Par.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Par ps = 1;
 * @return {!Array<!proto.rhoapi.Par>}
 */
proto.rhoapi.ConnectiveBody.prototype.getPsList = function() {
  return /** @type{!Array<!proto.rhoapi.Par>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rhoapi.Par, 1));
};


/**
 * @param {!Array<!proto.rhoapi.Par>} value
 * @return {!proto.rhoapi.ConnectiveBody} returns this
*/
proto.rhoapi.ConnectiveBody.prototype.setPsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.rhoapi.Par=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rhoapi.Par}
 */
proto.rhoapi.ConnectiveBody.prototype.addPs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.rhoapi.Par, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rhoapi.ConnectiveBody} returns this
 */
proto.rhoapi.ConnectiveBody.prototype.clearPsList = function() {
  return this.setPsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rhoapi.DeployId.prototype.toObject = function(opt_includeInstance) {
  return proto.rhoapi.DeployId.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rhoapi.DeployId} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rhoapi.DeployId.toObject = function(includeInstance, msg) {
  var f, obj = {
    sig: msg.getSig_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rhoapi.DeployId}
 */
proto.rhoapi.DeployId.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rhoapi.DeployId;
  return proto.rhoapi.DeployId.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rhoapi.DeployId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rhoapi.DeployId}
 */
proto.rhoapi.DeployId.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rhoapi.DeployId.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rhoapi.DeployId.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rhoapi.DeployId} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rhoapi.DeployId.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSig_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes sig = 1;
 * @return {!(string|Uint8Array)}
 */
proto.rhoapi.DeployId.prototype.getSig = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes sig = 1;
 * This is a type-conversion wrapper around `getSig()`
 * @return {string}
 */
proto.rhoapi.DeployId.prototype.getSig_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSig()));
};


/**
 * optional bytes sig = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSig()`
 * @return {!Uint8Array}
 */
proto.rhoapi.DeployId.prototype.getSig_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSig()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.rhoapi.DeployId} returns this
 */
proto.rhoapi.DeployId.prototype.setSig = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rhoapi.DeployerId.prototype.toObject = function(opt_includeInstance) {
  return proto.rhoapi.DeployerId.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rhoapi.DeployerId} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rhoapi.DeployerId.toObject = function(includeInstance, msg) {
  var f, obj = {
    publickey: msg.getPublickey_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rhoapi.DeployerId}
 */
proto.rhoapi.DeployerId.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rhoapi.DeployerId;
  return proto.rhoapi.DeployerId.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rhoapi.DeployerId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rhoapi.DeployerId}
 */
proto.rhoapi.DeployerId.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPublickey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rhoapi.DeployerId.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rhoapi.DeployerId.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rhoapi.DeployerId} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rhoapi.DeployerId.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPublickey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes publicKey = 1;
 * @return {!(string|Uint8Array)}
 */
proto.rhoapi.DeployerId.prototype.getPublickey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes publicKey = 1;
 * This is a type-conversion wrapper around `getPublickey()`
 * @return {string}
 */
proto.rhoapi.DeployerId.prototype.getPublickey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPublickey()));
};


/**
 * optional bytes publicKey = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPublickey()`
 * @return {!Uint8Array}
 */
proto.rhoapi.DeployerId.prototype.getPublickey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPublickey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.rhoapi.DeployerId} returns this
 */
proto.rhoapi.DeployerId.prototype.setPublickey = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.rhoapi.GUnforgeable.oneofGroups_ = [[1,2,3,4]];

/**
 * @enum {number}
 */
proto.rhoapi.GUnforgeable.UnfInstanceCase = {
  UNF_INSTANCE_NOT_SET: 0,
  G_PRIVATE_BODY: 1,
  G_DEPLOY_ID_BODY: 2,
  G_DEPLOYER_ID_BODY: 3,
  G_SYS_AUTH_TOKEN_BODY: 4
};

/**
 * @return {proto.rhoapi.GUnforgeable.UnfInstanceCase}
 */
proto.rhoapi.GUnforgeable.prototype.getUnfInstanceCase = function() {
  return /** @type {proto.rhoapi.GUnforgeable.UnfInstanceCase} */(jspb.Message.computeOneofCase(this, proto.rhoapi.GUnforgeable.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rhoapi.GUnforgeable.prototype.toObject = function(opt_includeInstance) {
  return proto.rhoapi.GUnforgeable.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rhoapi.GUnforgeable} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rhoapi.GUnforgeable.toObject = function(includeInstance, msg) {
  var f, obj = {
    gPrivateBody: (f = msg.getGPrivateBody()) && proto.rhoapi.GPrivate.toObject(includeInstance, f),
    gDeployIdBody: (f = msg.getGDeployIdBody()) && proto.rhoapi.GDeployId.toObject(includeInstance, f),
    gDeployerIdBody: (f = msg.getGDeployerIdBody()) && proto.rhoapi.GDeployerId.toObject(includeInstance, f),
    gSysAuthTokenBody: (f = msg.getGSysAuthTokenBody()) && proto.rhoapi.GSysAuthToken.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rhoapi.GUnforgeable}
 */
proto.rhoapi.GUnforgeable.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rhoapi.GUnforgeable;
  return proto.rhoapi.GUnforgeable.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rhoapi.GUnforgeable} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rhoapi.GUnforgeable}
 */
proto.rhoapi.GUnforgeable.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rhoapi.GPrivate;
      reader.readMessage(value,proto.rhoapi.GPrivate.deserializeBinaryFromReader);
      msg.setGPrivateBody(value);
      break;
    case 2:
      var value = new proto.rhoapi.GDeployId;
      reader.readMessage(value,proto.rhoapi.GDeployId.deserializeBinaryFromReader);
      msg.setGDeployIdBody(value);
      break;
    case 3:
      var value = new proto.rhoapi.GDeployerId;
      reader.readMessage(value,proto.rhoapi.GDeployerId.deserializeBinaryFromReader);
      msg.setGDeployerIdBody(value);
      break;
    case 4:
      var value = new proto.rhoapi.GSysAuthToken;
      reader.readMessage(value,proto.rhoapi.GSysAuthToken.deserializeBinaryFromReader);
      msg.setGSysAuthTokenBody(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rhoapi.GUnforgeable.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rhoapi.GUnforgeable.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rhoapi.GUnforgeable} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rhoapi.GUnforgeable.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGPrivateBody();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rhoapi.GPrivate.serializeBinaryToWriter
    );
  }
  f = message.getGDeployIdBody();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rhoapi.GDeployId.serializeBinaryToWriter
    );
  }
  f = message.getGDeployerIdBody();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.rhoapi.GDeployerId.serializeBinaryToWriter
    );
  }
  f = message.getGSysAuthTokenBody();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.rhoapi.GSysAuthToken.serializeBinaryToWriter
    );
  }
};


/**
 * optional GPrivate g_private_body = 1;
 * @return {?proto.rhoapi.GPrivate}
 */
proto.rhoapi.GUnforgeable.prototype.getGPrivateBody = function() {
  return /** @type{?proto.rhoapi.GPrivate} */ (
    jspb.Message.getWrapperField(this, proto.rhoapi.GPrivate, 1));
};


/**
 * @param {?proto.rhoapi.GPrivate|undefined} value
 * @return {!proto.rhoapi.GUnforgeable} returns this
*/
proto.rhoapi.GUnforgeable.prototype.setGPrivateBody = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.rhoapi.GUnforgeable.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rhoapi.GUnforgeable} returns this
 */
proto.rhoapi.GUnforgeable.prototype.clearGPrivateBody = function() {
  return this.setGPrivateBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rhoapi.GUnforgeable.prototype.hasGPrivateBody = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional GDeployId g_deploy_id_body = 2;
 * @return {?proto.rhoapi.GDeployId}
 */
proto.rhoapi.GUnforgeable.prototype.getGDeployIdBody = function() {
  return /** @type{?proto.rhoapi.GDeployId} */ (
    jspb.Message.getWrapperField(this, proto.rhoapi.GDeployId, 2));
};


/**
 * @param {?proto.rhoapi.GDeployId|undefined} value
 * @return {!proto.rhoapi.GUnforgeable} returns this
*/
proto.rhoapi.GUnforgeable.prototype.setGDeployIdBody = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.rhoapi.GUnforgeable.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rhoapi.GUnforgeable} returns this
 */
proto.rhoapi.GUnforgeable.prototype.clearGDeployIdBody = function() {
  return this.setGDeployIdBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rhoapi.GUnforgeable.prototype.hasGDeployIdBody = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional GDeployerId g_deployer_id_body = 3;
 * @return {?proto.rhoapi.GDeployerId}
 */
proto.rhoapi.GUnforgeable.prototype.getGDeployerIdBody = function() {
  return /** @type{?proto.rhoapi.GDeployerId} */ (
    jspb.Message.getWrapperField(this, proto.rhoapi.GDeployerId, 3));
};


/**
 * @param {?proto.rhoapi.GDeployerId|undefined} value
 * @return {!proto.rhoapi.GUnforgeable} returns this
*/
proto.rhoapi.GUnforgeable.prototype.setGDeployerIdBody = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.rhoapi.GUnforgeable.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rhoapi.GUnforgeable} returns this
 */
proto.rhoapi.GUnforgeable.prototype.clearGDeployerIdBody = function() {
  return this.setGDeployerIdBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rhoapi.GUnforgeable.prototype.hasGDeployerIdBody = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional GSysAuthToken g_sys_auth_token_body = 4;
 * @return {?proto.rhoapi.GSysAuthToken}
 */
proto.rhoapi.GUnforgeable.prototype.getGSysAuthTokenBody = function() {
  return /** @type{?proto.rhoapi.GSysAuthToken} */ (
    jspb.Message.getWrapperField(this, proto.rhoapi.GSysAuthToken, 4));
};


/**
 * @param {?proto.rhoapi.GSysAuthToken|undefined} value
 * @return {!proto.rhoapi.GUnforgeable} returns this
*/
proto.rhoapi.GUnforgeable.prototype.setGSysAuthTokenBody = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.rhoapi.GUnforgeable.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rhoapi.GUnforgeable} returns this
 */
proto.rhoapi.GUnforgeable.prototype.clearGSysAuthTokenBody = function() {
  return this.setGSysAuthTokenBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rhoapi.GUnforgeable.prototype.hasGSysAuthTokenBody = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rhoapi.GPrivate.prototype.toObject = function(opt_includeInstance) {
  return proto.rhoapi.GPrivate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rhoapi.GPrivate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rhoapi.GPrivate.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: msg.getId_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rhoapi.GPrivate}
 */
proto.rhoapi.GPrivate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rhoapi.GPrivate;
  return proto.rhoapi.GPrivate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rhoapi.GPrivate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rhoapi.GPrivate}
 */
proto.rhoapi.GPrivate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rhoapi.GPrivate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rhoapi.GPrivate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rhoapi.GPrivate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rhoapi.GPrivate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.rhoapi.GPrivate.prototype.getId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes id = 1;
 * This is a type-conversion wrapper around `getId()`
 * @return {string}
 */
proto.rhoapi.GPrivate.prototype.getId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getId()));
};


/**
 * optional bytes id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getId()`
 * @return {!Uint8Array}
 */
proto.rhoapi.GPrivate.prototype.getId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.rhoapi.GPrivate} returns this
 */
proto.rhoapi.GPrivate.prototype.setId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rhoapi.GDeployId.prototype.toObject = function(opt_includeInstance) {
  return proto.rhoapi.GDeployId.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rhoapi.GDeployId} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rhoapi.GDeployId.toObject = function(includeInstance, msg) {
  var f, obj = {
    sig: msg.getSig_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rhoapi.GDeployId}
 */
proto.rhoapi.GDeployId.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rhoapi.GDeployId;
  return proto.rhoapi.GDeployId.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rhoapi.GDeployId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rhoapi.GDeployId}
 */
proto.rhoapi.GDeployId.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rhoapi.GDeployId.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rhoapi.GDeployId.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rhoapi.GDeployId} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rhoapi.GDeployId.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSig_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes sig = 1;
 * @return {!(string|Uint8Array)}
 */
proto.rhoapi.GDeployId.prototype.getSig = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes sig = 1;
 * This is a type-conversion wrapper around `getSig()`
 * @return {string}
 */
proto.rhoapi.GDeployId.prototype.getSig_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSig()));
};


/**
 * optional bytes sig = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSig()`
 * @return {!Uint8Array}
 */
proto.rhoapi.GDeployId.prototype.getSig_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSig()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.rhoapi.GDeployId} returns this
 */
proto.rhoapi.GDeployId.prototype.setSig = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rhoapi.GDeployerId.prototype.toObject = function(opt_includeInstance) {
  return proto.rhoapi.GDeployerId.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rhoapi.GDeployerId} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rhoapi.GDeployerId.toObject = function(includeInstance, msg) {
  var f, obj = {
    publickey: msg.getPublickey_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rhoapi.GDeployerId}
 */
proto.rhoapi.GDeployerId.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rhoapi.GDeployerId;
  return proto.rhoapi.GDeployerId.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rhoapi.GDeployerId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rhoapi.GDeployerId}
 */
proto.rhoapi.GDeployerId.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPublickey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rhoapi.GDeployerId.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rhoapi.GDeployerId.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rhoapi.GDeployerId} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rhoapi.GDeployerId.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPublickey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes publicKey = 1;
 * @return {!(string|Uint8Array)}
 */
proto.rhoapi.GDeployerId.prototype.getPublickey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes publicKey = 1;
 * This is a type-conversion wrapper around `getPublickey()`
 * @return {string}
 */
proto.rhoapi.GDeployerId.prototype.getPublickey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPublickey()));
};


/**
 * optional bytes publicKey = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPublickey()`
 * @return {!Uint8Array}
 */
proto.rhoapi.GDeployerId.prototype.getPublickey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPublickey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.rhoapi.GDeployerId} returns this
 */
proto.rhoapi.GDeployerId.prototype.setPublickey = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rhoapi.GSysAuthToken.prototype.toObject = function(opt_includeInstance) {
  return proto.rhoapi.GSysAuthToken.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rhoapi.GSysAuthToken} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rhoapi.GSysAuthToken.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rhoapi.GSysAuthToken}
 */
proto.rhoapi.GSysAuthToken.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rhoapi.GSysAuthToken;
  return proto.rhoapi.GSysAuthToken.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rhoapi.GSysAuthToken} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rhoapi.GSysAuthToken}
 */
proto.rhoapi.GSysAuthToken.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rhoapi.GSysAuthToken.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rhoapi.GSysAuthToken.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rhoapi.GSysAuthToken} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rhoapi.GSysAuthToken.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


goog.object.extend(exports, proto.rhoapi);
